# Codebase Context File for Gemini 2.5 Pro

Generated on: 2025-03-30T18:17:55.936557
Root directory: /home/rookslog/philosothon



================================================================================
FILE: docs/adr/2025-03-30-admin-authentication.md
TYPE: documentation
SIZE: 9701 bytes
LAST MODIFIED: 2025-03-30T18:08:15.465617
================================================================================

# Admin Authentication System

*Version: 1.0*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Proposed - 2025-03-30

### Context
The Philosothon platform requires a secure method to authenticate administrators for accessing protected areas, specifically for managing event content (themes, workshops, FAQ) and viewing imported registration data. For the MVP, only a small, trusted group of event organizers requires access. Participant authentication is not required initially.

### Decision Drivers
- **Simplicity & Speed**: Need the simplest secure solution implementable within the 2-day MVP timeline.
- **No Participant Accounts**: MVP scope explicitly excludes participant logins.
- **Security**: Must restrict access reliably to authorized personnel only.
- **Cost**: Solution should fit within the Supabase free tier.
- **Compliance**: Must align with University policies regarding access control and data handling.

### Decision
We will use **Supabase Auth's built-in Email Magic Link** feature for administrator authentication. Access will be restricted to specific email addresses belonging to authorized event organizers, enforced via Supabase Auth settings and potentially Row-Level Security (RLS) checks.

Key implementation aspects include:
- Configuring Supabase Auth to allow only magic link logins.
- Restricting sign-ups/logins to a predefined list or domain (e.g., `@utoronto.ca` or specific organizer emails).
- Implementing session management using Supabase's client library (`@supabase/supabase-js`).
- Protecting admin routes and API endpoints in Next.js based on Supabase authentication state.

### Alternatives Considered
1.  **NextAuth.js**:
    *   *Pros*: Highly flexible, supports various providers (OAuth, email, credentials), widely used in the Next.js ecosystem.
    *   *Cons*: More complex setup compared to Supabase built-in auth; potentially overkill for admin-only MVP needs.
2.  **Custom JWT Implementation**:
    *   *Pros*: Full control over token generation, validation, and session logic.
    *   *Cons*: Significant development effort required; high risk of security vulnerabilities if not implemented correctly.
3.  **Supabase Auth with Google OAuth**:
    *   *Pros*: Familiar login experience for users with Google accounts.
    *   *Cons*: Requires configuring OAuth credentials; slightly more setup than magic links; still requires restricting access to specific Google accounts.

### Consequences
-   **Positive**:
    *   Very fast implementation leveraging Supabase's built-in features.
    *   Passwordless authentication improves security posture (no stored passwords).
    *   Seamless integration with Supabase database and RLS.
    *   Minimal maintenance overhead for the authentication system itself.
-   **Negative**:
    *   Dependent on email deliverability for magic links.
    *   Users might find magic links less familiar than passwords initially.
    *   Less flexibility compared to a dedicated library like NextAuth.js if complex multi-provider auth is needed later.
-   **Risks**:
    *   Email interception (mitigated by short link expiry, HTTPS).
    *   Session fixation/hijacking (mitigated by Supabase's secure session handling, HTTPOnly cookies).
    *   Accidental granting of access if email allowlist is misconfigured.
-   **Mitigations**:
    *   Use short expiry times for magic links (e.g., 5-15 minutes).
    *   Implement strict Content Security Policy (CSP) and CORS policies.
    *   Regularly audit the list of authorized admin emails in Supabase Auth settings.
    *   Log all admin login events.

### Implementation Details
-   **Supabase Config**: Enable Email provider, disable other providers (Password, OAuth initially). Configure "Disable signup" setting if using a strict allowlist, or configure domain restrictions. Set secure session expiry (e.g., 1 hour inactivity, 8 hours absolute).
-   **Admin Onboarding**: Initial admin users (e.g., event organizers) will have their specific email addresses manually added to an allowlist within the Supabase Auth settings by the lead developer/administrator. They will then use the magic link flow to log in for the first time.
-   **Role-Based Access (MVP)**: For MVP, all authenticated admins will have the same level of access ('admin' role implicitly). RLS policies in Supabase will check `auth.role() = 'authenticated'` and potentially `auth.email() = ANY('{admin1@domain.com, admin2@domain.com}')` for critical operations if needed, although relying on the Auth allowlist is primary. More granular roles (e.g., 'content_editor', 'registration_viewer') can be added later using custom claims or a separate roles table if complexity increases.
-   **Next.js Integration**: Use Supabase Auth helpers (`@supabase/auth-helpers-nextjs`) for managing sessions and protecting routes/API endpoints. Check user authentication status in middleware or server-side props/API route handlers.
-   **UI**: Create a simple `/admin/login` page with an email input field to trigger the magic link flow. Redirect authenticated users to `/admin/dashboard`. Provide a logout button.

### Security Considerations
-   **Authentication**: Magic links provide strong protection against password-based attacks. Ensure email accounts themselves are secure (e.g., MFA enabled).
-   **Authorization**: Primarily managed by restricting *who* can log in via Supabase Auth settings. RLS provides a secondary layer within the database.
-   **Session Management**: Rely on Supabase's secure defaults (HTTPOnly, Secure cookies). Configure appropriate session timeouts.
-   **Audit Logging**: Supabase Auth automatically logs login events. Supplement with application-level logging for critical admin actions (e.g., content updates, data exports) storing the authenticated user's ID (`auth.uid()`). Logs should be stored securely (e.g., Supabase table with restricted access, external logging service) and retained according to University policy (e.g., 90 days).
-   **Access Recovery**: If an admin loses access to their email, another authorized admin or the Supabase project owner must manually update the allowed email address in the Supabase Auth settings. There is no self-service recovery for magic links tied to a lost email account.

### Migration Path
-   **Short-term Plan**: Implement magic link auth for MVP.
-   **Long-term Strategy**:
    1.  If more granular roles are needed, implement custom claims in Supabase Auth or a dedicated user roles table linked to `auth.users`.
    2.  If participant logins are required (Phase 4+), enable additional Supabase Auth providers (e.g., Google OAuth, Email/Password) or migrate to NextAuth.js for greater flexibility, integrating it with Supabase Auth user data.
    3.  Consider adding 2FA (e.g., TOTP) via Supabase Auth if security requirements increase.
-   **Rollback Plan**: Disable magic link provider in Supabase. If an alternative was needed urgently, implement basic HTTP Basic Auth protected by environment variables as a temporary measure (not recommended for long-term).

### Success Metrics
-   **Login Success Rate**: Target > 98% success rate for magic link delivery and authentication for authorized admins.
-   **Admin Access Issues**: Target < 1 support request per month related to admin login problems.
-   **Security Incidents**: Zero security breaches related to admin authentication.

### Dependencies
-   **Depends on**: ADR-002 (Supabase Backend) for the Auth service and user storage.
-   **Influences**: All Admin UI components and API endpoints (`/admin/*`, `/api/admin/*`). RLS policies in the database.

### Review Trigger
Re-evaluate this decision if:
-   The number of required administrators exceeds 10-15 (manual allowlist management becomes cumbersome).
-   Participant logins become a requirement for the platform.
-   Significant issues arise with email deliverability for magic links.
-   A requirement for multi-factor authentication emerges.

### References
-   Project Specifications ยง3.1 (Authentication) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง4.2.2 (Auth Logic) ([docs/project_specifications.md](docs/project_specifications.md))
-   Supabase Auth Documentation: [https://supabase.com/docs/guides/auth](https://supabase.com/docs/guides/auth)
-   Supabase Auth Helpers for Next.js: [https://supabase.com/docs/guides/auth/auth-helpers/nextjs](https://supabase.com/docs/guides/auth/auth-helpers/nextjs)

```mermaid
graph TD
    A[Supabase Magic Link Auth] --> B(Simplicity);
    A --> C(Passwordless Security);
    A --> D(Fast Implementation);
    A ==> E(Email Dependency);
    A ==> F(Manual Onboarding);
    style A fill:#4285f4,stroke:#1a73e8,stroke-width:2px
    style E fill:#fbbc04
    style F fill:#fbbc04
```

```mermaid
flowchart LR
    subgraph "Login Flow"
        Admin --> LoginUI[Login Page UI];
        LoginUI -- Email --> TriggerAPI[/api/auth/login];
        TriggerAPI -- Calls Supabase --> SupaAuth[Supabase Auth];
        SupaAuth -- Sends --> Email[Magic Link Email];
        Admin -- Clicks Link --> VerifyURL[/api/auth/callback];
        VerifyURL -- Verifies Token --> SupaAuth;
        SupaAuth -- Sets Session --> Browser;
        Browser -- Authenticated --> AdminDash[Admin Dashboard];
    end
    style SupaAuth fill:#3ecf8e
```

## Version History
| Version | Date       | Author        | Changes                                                                 |
|---------|------------|---------------|-------------------------------------------------------------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial draft incorporating feedback on onboarding, roles, recovery, logging. |

================================================================================
FILE: docs/adr/2025-03-30-content-management-strategy.md
TYPE: documentation
SIZE: 9597 bytes
LAST MODIFIED: 2025-03-30T18:10:55.512482
================================================================================

# Content Management Strategy

*Version: 1.0*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Proposed - 2025-03-30

### Context
The Philosothon website needs to display dynamic content such as event themes, workshop descriptions, and FAQ items. This content may need updates by event organizers. A strategy is required for storing, managing, and retrieving this content for display on the Next.js frontend, balancing flexibility with implementation speed for the MVP.

### Decision Drivers
- **Flexibility**: Organizers need the ability to update content without requiring code changes or redeployments.
- **Structured Data**: Content needs to be structured (e.g., theme title, description, workshop facilitator) to be displayed correctly and potentially used for future features (filtering, relations).
- **MVP Speed**: The management interface needs to be simple and quick to implement within the 2-day timeline.
- **Integration**: Must integrate with the chosen backend (Supabase) and frontend (Next.js).

### Decision
We will adopt a **Database-Driven Content Management** approach using **Supabase** as the content store and a **Simple Custom Admin Interface** built within the Next.js application for content updates.

Key implementation aspects include:
- Storing content (themes, workshops, faq_items) in dedicated Supabase PostgreSQL tables as defined in the schema (ยง4.3).
- Creating protected API routes in Next.js (`/api/admin/content`) for authenticated administrators to update content records (e.g., PUT requests).
- Building basic forms within the protected `/admin` section of the Next.js app to allow admins to view and edit content records fetched from Supabase.
- Fetching content for public display using Next.js data fetching methods (SSG/ISR) via read-only API routes (`/api/content/*`) or direct Supabase queries server-side.

### Alternatives Considered
1.  **Markdown Files in Git Repository**:
    *   *Pros*: Simple for developers to update; version controlled via Git; works well with SSG.
    *   *Cons*: Requires developers for content updates; less accessible for non-technical organizers; harder to manage structured data relationships.
2.  **Headless CMS (e.g., Contentful, Strapi, Sanity)**:
    *   *Pros*: Provides a dedicated, user-friendly UI for content management; powerful features (content modeling, previews, localization).
    *   *Cons*: Introduces another external service and potential cost; adds complexity and learning curve; likely overkill for MVP needs; requires integration effort.
3.  **Direct Database Editing (e.g., via Supabase Studio/pgAdmin)**:
    *   *Pros*: No custom admin UI needed initially.
    *   *Cons*: Requires admins to interact directly with the database interface, which can be intimidating and error-prone; harder to enforce validation or specific workflows; potential security risks if access is not tightly controlled.

### Consequences
-   **Positive**:
    *   Content is centrally stored and managed in the primary database (Supabase).
    *   Provides flexibility for organizers to update content via a web interface.
    *   Structured data allows for easier querying and use in different parts of the application.
    *   Leverages existing technology choices (Next.js, Supabase, Tailwind) for the admin UI.
-   **Negative**:
    *   Requires development effort to build the custom admin interface (forms, API routes), even a simple one.
    *   The custom admin UI will likely be less feature-rich than a dedicated Headless CMS.
    *   Potential for performance issues in the admin UI if not implemented carefully (e.g., fetching large lists of content).
-   **Risks**:
    *   Admin UI development takes longer than anticipated, impacting MVP timeline.
    *   Security vulnerabilities in the custom admin API routes or UI if not properly secured.
    *   Lack of features like content preview or version history in the simple admin UI.
-   **Mitigations**:
    *   Keep the MVP admin UI extremely simple (basic CRUD forms for each content type).
    *   Thoroughly secure admin API routes using Supabase Auth checks (see ADR-Admin-Authentication).
    *   Implement basic validation on admin forms and API routes.
    *   Plan for potential enhancements to the admin UI post-MVP if needed.

### Implementation Details
-   **Database Tables**: Use `themes`, `workshops`, `faq_items` tables in Supabase as defined in Project Specs ยง4.3.
-   **Admin UI**: Create pages under `/admin/content/` (e.g., `/admin/content/themes`, `/admin/content/workshops`). Use simple HTML forms styled with Tailwind CSS. Fetch list data using SWR/React Query after auth check. Form submissions trigger PUT/POST requests to API routes.
-   **API Routes (Admin)**:
    *   `/api/admin/content/themes`: Handles GET (list), PUT (update), POST (create - maybe future), DELETE (maybe future). Requires admin auth check.
    *   `/api/admin/content/workshops`: Similar CRUD operations. Requires admin auth check.
    *   `/api/admin/content/faq`: Similar CRUD operations. Requires admin auth check.
-   **API Routes (Public)**:
    *   `/api/content/themes`: Handles GET (list). No auth required. Used by `getStaticProps`/`getServerSideProps`.
    *   `/api/content/workshops`: Handles GET (list). No auth required. Used by `getStaticProps`/`getServerSideProps`.
    *   (FAQ might be fetched directly server-side in `getStaticProps` for `/faq` page).
-   **Data Fetching (Public)**: Use `getStaticProps` (for SSG/ISR) or `getServerSideProps` (for SSR) on public pages to fetch content directly from Supabase using the service role key for optimal performance, bypassing public API routes where possible for build-time/server-side rendering.

### Security Considerations
-   **Authorization**: All admin API routes (`/api/admin/*`) MUST rigorously check for a valid, authenticated admin session using Supabase Auth before processing requests.
-   **Input Validation**: Sanitize and validate all data received from admin forms on the server-side (in API routes) before saving to the database to prevent injection attacks or data corruption.
-   **Rate Limiting**: Consider basic rate limiting on admin API routes if abuse is a concern.
-   **RLS**: While API routes perform auth checks, ensure Supabase RLS policies provide a second layer of defense, preventing unauthorized database modifications even if an API route vulnerability exists.

### Migration Path
-   **Short-term Plan**: Build the simple CRUD interface for MVP.
-   **Long-term Strategy**: If content management needs become significantly more complex (e.g., requiring rich text editing, image uploads, content previews, complex workflows, non-technical user roles), consider migrating to a dedicated Headless CMS (like Strapi self-hosted or Contentful/Sanity cloud-based) integrated with Supabase/Next.js. The structured data in Supabase makes this migration feasible.
-   **Rollback Plan**: If the custom admin UI proves unworkable, temporarily revert to direct database editing via Supabase Studio for admins as an emergency fallback, while addressing the UI issues.

### Success Metrics
-   **Content Update Time**: Admin can update a theme/workshop/FAQ item via the UI in < 5 minutes.
-   **Admin UI Errors**: Low rate of errors encountered by admins using the interface.
-   **Development Time**: Simple admin CRUD interface for core content types built within allocated MVP time (approx. 4-6 hours).

### Dependencies
-   **Depends on**: ADR-Supabase-Backend, ADR-Nextjs-Frontend-Framework, ADR-Admin-Authentication, ADR-Tailwind-CSS. Database schema definition.
-   **Influences**: Implementation of public-facing pages (data fetching), admin dashboard structure.

### Review Trigger
Re-evaluate this decision if:
-   Content update requirements become significantly more complex (e.g., rich text, workflows).
-   Non-technical users require a much more polished content editing experience than the simple custom UI provides.
-   Maintaining the custom admin UI becomes a significant burden.

### References
-   Project Specifications ยง3.3 (Content Management) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง4.2.1 (API Routes) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง4.3 (Database Schema) ([docs/project_specifications.md](docs/project_specifications.md))

```mermaid
graph TD
    A[DB-Driven Content] --> B(Flexibility);
    A --> C(Structured Data);
    A --> D(Centralized Storage);
    A ==> E(Custom UI Effort);
    A ==> F(Less Feature-Rich than CMS);
    style A fill:#ff7f50,stroke:#cc6640,stroke-width:2px
    style E fill:#fbbc04
    style F fill:#fbbc04
```

```mermaid
flowchart LR
    subgraph "Admin User"
        Admin --> AdminUI[Admin UI (Next.js /admin)];
    end
    subgraph "Next.js App"
        AdminUI -- Reads/Writes --> AdminAPI[Admin API Routes (/api/admin/*)];
        PublicPages[Public Pages (SSG/ISR)] -- Reads --> PublicAPI[Public API Routes (/api/content/*)];
        PublicPages -- Reads Direct --> SupaDB[(Supabase DB)];
    end
    subgraph "Backend"
        AdminAPI -- Modifies --> SupaDB;
        PublicAPI -- Reads --> SupaDB;
    end

    AdminUI -- Auth Check --> SupaAuth[Supabase Auth];
    AdminAPI -- Auth Check --> SupaAuth;

    style SupaDB fill:#3ecf8e
    style SupaAuth fill:#4285f4
```

## Version History
| Version | Date       | Author        | Changes             |
|---------|------------|---------------|---------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial draft       |

================================================================================
FILE: docs/adr/2025-03-30-google-forms-registration.md
TYPE: documentation
SIZE: 8422 bytes
LAST MODIFIED: 2025-03-30T18:07:12.122212
================================================================================

# Google Forms Registration System

*Version: 1.1*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Approved - 2025-03-30

### Context
Need a registration solution for the Philosothon event platform that:
- Can be implemented within the 48-hour MVP development window.
- Supports complex question logic (ranked choices, conditional fields).
- Requires minimal maintenance and zero development overhead for form handling.
- Integrates easily with existing University Google Workspace infrastructure.
- Is familiar to student participants.

### Decision Drivers
- **Time Constraint**: Strict 2-day deadline for MVP launch.
- **Familiarity**: Students are accustomed to Google Forms, reducing friction.
- **Cost**: Free tier is sufficient for expected scale (~30 participants).
- **Features**: Native support for required question types (ranking, text, checkboxes).
- **Compliance**: Leverages existing University data handling practices via Google Workspace.

### Decision
We will use **Google Forms** for participant registration during the MVP phase, embedding the form directly into the Next.js website via an iframe. Data will be collected in Google Sheets and manually exported/imported into the Supabase database weekly.

Key implementation aspects include:
- Embedding the form using a responsive iframe.
- Designing the form with clear sections and instructions.
- Linking the form output to a dedicated Google Sheet.
- Establishing a manual weekly CSV export/import process.
- Utilizing Supabase admin interface for reviewing imported data.

### Alternatives Considered
1.  **Custom Form Builder (React Hook Form + API)**:
    *   *Pros*: Full control over UX and data flow; direct integration with Supabase.
    *   *Cons*: Estimated 2-week development time, significantly exceeding MVP timeline; requires backend API development.
2.  **Typeform**:
    *   *Pros*: Superior user experience and design customization.
    *   *Cons*: Requires paid subscription ($29/month+) for necessary features; introduces external dependency and cost.
3.  **Airtable Forms**:
    *   *Pros*: Direct integration potential with Airtable base (alternative backend); spreadsheet-like interface.
    *   *Cons*: Steeper learning curve for admins compared to Google Forms; potential API limitations.

### Consequences
-   **Positive**:
    *   Operational registration system achievable within ~4 hours.
    *   Leverages built-in Google Forms analytics and response tracking.
    *   High user familiarity reduces support needs.
    *   Zero direct cost for form hosting/submission handling.
-   **Negative**:
    *   Manual data export/import process is error-prone and time-consuming.
    *   Limited branding and styling customization within the embedded form.
    *   Dependency on Google services availability.
-   **Risks**:
    *   Data entry errors during manual CSV handling/import.
    *   Delays in data availability in the admin dashboard due to weekly import cycle.
    *   Potential Google service outages impacting registration availability.
-   **Mitigations**:
    *   Implement checksum validation script for CSV imports.
    *   Maintain local backups of Google Sheet exports.
    *   Develop clear documentation and training for the manual import process.
    *   Establish a communication plan for potential Google service outages (e.g., website banner).

### Implementation Details
-   **Form Embedding**: Use standard iframe embed code within a dedicated `/register` page component in Next.js. Ensure iframe `max-width: 800px` and responsive height.
-   **Validation**: Utilize Google Forms' built-in validation rules (required fields, email format, number ranges). Complex cross-field validation is not feasible in MVP.
-   **Export Process**: Event coordinator exports Google Sheet data to CSV weekly (e.g., every Friday EOD).
-   **Import Process**: Use a simple Python script (run manually by admin) to sanitize CSV (e.g., trim whitespace, basic format checks) before import via Supabase pgAdmin interface or a dedicated admin import function (Phase 1.5).
-   **Data Flow**: Participant -> Google Form -> Google Sheet -> Manual CSV Export -> Manual Sanitization -> Manual Supabase Import -> Admin Dashboard.

### Security Considerations
-   **Access Control**: Form restricted to users logged into `@utoronto.ca` Google accounts.
-   **Data Encryption**: Data encrypted in transit (HTTPS) by Google Forms and during CSV transfer (e.g., using encrypted storage or secure transfer methods).
-   **PII Handling**: Minimize PII collected; clearly state data usage purpose. PII in exports limited to name, email, program, year for team formation. Follow University data retention policies (e.g., delete raw export data after 30 days).
-   **Compliance**: Aligns with University FIPPA guidelines through use of approved Google Workspace tools. Consider GDPR principles for transparency and consent, although primary compliance is FIPPA.

### Migration Path
-   **Short-term Plan**: Implement manual process for MVP. Develop basic CSV sanitization script.
-   **Long-term Strategy (Phase 2)**:
    1.  Implement Google Apps Script or use a third-party tool (e.g., Zapier, Make) to trigger a webhook on form submission.
    2.  Develop a secure API endpoint in Next.js to receive webhook data.
    3.  Automate data validation, transformation, and insertion into Supabase.
    4.  Gradually transition to a custom React form component (Phase 4) while maintaining the Google Forms webhook as a fallback/parallel system during transition. Ensure schema compatibility.
-   **Rollback Plan**: If major issues arise with Google Forms, revert to a simple mailto: link for registration inquiries as an emergency fallback.

### Success Metrics
-   **Form Completion Rate**: Target > 90% completion rate for users who start the form.
-   **Abandonment Rate**: Target < 10% abandonment rate after starting the form.
-   **Data Import Errors**: Target < 5% error rate during manual import process per batch.
-   **Admin Time**: Track time spent on manual export/import; aim to reduce in Phase 2.

### Dependencies
-   **Depends on**: ADR-002 (Supabase Backend) for data storage.
-   **Influences**: ADR-005 (Admin Authentication - for accessing imported data), ADR-006 (Data Flow Architecture).

### Review Trigger
Re-evaluate this decision if:
-   Registration volume exceeds 100 participants (manual process becomes too burdensome).
-   Data import errors consistently exceed 10% per batch.
-   Significant Google Forms service outages occur more than once per month.
-   University policy regarding Google Workspace tools changes.

### References
-   Project Specifications ยง3.1 (Registration System) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง6.2 (Operations Processes) ([docs/project_specifications.md](docs/project_specifications.md))
-   University of Toronto FIPPA Guidelines ([Link to relevant UofT policy page])

```mermaid
graph TD
    A[Google Forms] --> B(Rapid MVP);
    A --> C(User Familiarity);
    A --> D(Zero Dev Cost);
    A ==> E(Manual Process Risk);
    A ==> F(Dependency on Google);
    style A fill:#34a853,stroke:#0d652d,stroke-width:2px
    style E fill:#fbbc04,stroke:#e37400
    style F fill:#fbbc04,stroke:#e37400
```

```mermaid
flowchart LR
    subgraph "MVP Registration Flow"
        direction LR
        P[Participant] --> GF(Google Form);
        GF -- Submits --> GS[Google Sheet];
        Admin -- Manual Export --> CSV[CSV File];
        CSV -- Manual Import --> DB[(Supabase DB)];
        DB --> AdminDash[Admin Dashboard];
        AdminDash -- Review --> Teams[Team Assignments];
        Teams -- Notify --> P;
    end
    style GF fill:#34a853,stroke:#0d652d
    style DB fill:#3ecf8e,stroke:#277c5c
    style Teams fill:#fbbc04,stroke:#e37400
```

## Version History
| Version | Date       | Author        | Changes                                                                 |
|---------|------------|---------------|-------------------------------------------------------------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial version based on project specs.                                   |
| 1.1     | 2025-03-30 | Roo (AI)      | Added Implementation, Security, Migration, Success Metrics, Version History sections based on user feedback. Expanded details on validation, privacy, fallbacks. |

================================================================================
FILE: docs/adr/2025-03-30-hybrid-rendering.md
TYPE: documentation
SIZE: 9707 bytes
LAST MODIFIED: 2025-03-30T18:10:25.181383
================================================================================

# Hybrid Rendering Strategy

*Version: 1.1*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Approved - 2025-03-30

### Context
The Philosothon platform requires different rendering strategies for various page types to balance performance, SEO, and data freshness. Public content pages need to be fast and indexable, while admin areas require up-to-date data and secure access. Workshop listings need periodic updates without requiring a full site rebuild.

### Decision Drivers
- **Performance**: Achieve high Lighthouse scores and fast perceived load times (Core Web Vitals).
- **SEO**: Ensure public content pages (Home, About, Themes, FAQ, Workshops) are easily discoverable by search engines.
- **Data Freshness**: Admin dashboard needs near real-time data; workshop/theme info needs periodic updates.
- **Development Experience**: Leverage Next.js features effectively without excessive complexity.
- **Caching**: Balance caching benefits with the need for data updates.

### Decision
We will implement a **hybrid rendering strategy using Next.js capabilities**:
- **Static Site Generation (SSG)**: For primarily static public pages (`/`, `/about`, `/faq`, `/themes`). Build-time generation ensures maximum performance and SEO.
- **Server-Side Rendering (SSR)**: For protected admin pages (`/admin/*`). Ensures data is fresh on each request and allows server-side authentication checks before rendering.
- **Incremental Static Regeneration (ISR)**: For pages with content that updates periodically but not constantly (`/workshops`). Allows static generation benefits with background regeneration.
- **Client-Side Rendering (CSR)**: For highly interactive UI elements within pages (e.g., filtering controls, dynamic status updates after initial load) using libraries like SWR or React Query.

Key implementation aspects include:
- Using `getStaticProps` for SSG pages.
- Using `getServerSideProps` (with auth checks) for SSR admin pages.
- Using `getStaticProps` with the `revalidate` option for ISR pages.
- Fetching data client-side where appropriate after initial page load for dynamic UI updates.

### Alternatives Considered
1.  **Full SSG**:
    *   *Pros*: Maximum performance, simplest build output.
    *   *Cons*: Not suitable for dynamic admin data; requires full rebuild for any content update.
2.  **Full SSR**:
    *   *Pros*: Always serves fresh data.
    *   *Cons*: Slower initial load times compared to SSG; higher server load; less optimal for static content.
3.  **Client-Side Rendering (CSR) Only (e.g., standard React SPA)**:
    *   *Pros*: Rich interactivity, potentially simpler initial setup for developers familiar with SPAs.
    *   *Cons*: Poor initial load performance and SEO without pre-rendering; requires separate handling for static content generation.
4.  **Edge Runtime SSR (e.g., Next.js Middleware/Edge Functions)**:
    *   *Pros*: Very fast global delivery for dynamic content.
    *   *Cons*: Runtime limitations (e.g., no direct Node.js APIs, potential DB connection issues without specific drivers/proxies like Supabase Edge Functions); adds complexity.

### Consequences
-   **Positive**:
    *   Optimized performance tailored to each page type (fast static pages, fresh dynamic pages).
    *   Excellent SEO for public content.
    *   Efficient data fetching strategies (build-time, server-side, client-side).
    *   Leverages core Next.js strengths effectively.
    *   ISR provides balance between static performance and content updates.
-   **Negative**:
    *   Increased complexity compared to a single rendering strategy.
    *   Requires developers to understand different Next.js data fetching methods (`getStaticProps`, `getServerSideProps`, client-side).
    *   ISR introduces potential for briefly stale content between revalidations.
    *   Build times can increase with many SSG/ISR pages.
-   **Risks**:
    *   Serving stale content if ISR `revalidate` times are too long or background regeneration fails.
    *   Cache invalidation complexity if not relying on Next.js built-in mechanisms.
    *   Performance degradation on SSR pages if `getServerSideProps` is slow.
-   **Mitigations**:
    *   Set appropriate `revalidate` times for ISR based on content volatility (e.g., 6 hours for workshops seems reasonable initially).
    *   Monitor build times and Vercel function execution times.
    *   Implement efficient data fetching logic in `getServerSideProps`.
    *   Use `stale-while-revalidate` caching headers where appropriate for client-side fetched data.
    *   Implement robust error handling for data fetching methods.

### Implementation Details
-   **SSG Pages**: `/`, `/about`, `/faq`, `/themes`. Use `getStaticProps` to fetch content from Supabase at build time.
-   **SSR Pages**: `/admin/*`. Use `getServerSideProps` to check Supabase Auth status; redirect if not authenticated, otherwise fetch required admin data.
-   **ISR Pages**: `/workshops`. Use `getStaticProps` with `revalidate: 21600` (6 hours) to fetch workshop data from Supabase.
-   **Client-Side Fetching**: Use SWR or React Query within components for actions like filtering workshops/themes client-side after initial load, or fetching user-specific state in the admin dashboard.
-   **Data Fetching Library**: Use `@supabase/supabase-js` within Next.js data fetching functions and API routes.

### Security Considerations
-   **SSR Pages**: Crucially important to perform authentication/authorization checks within `getServerSideProps` before fetching or returning sensitive data for admin pages.
-   **SSG/ISR Pages**: These pages are built server-side and served statically; they should not contain user-specific or sensitive data unless it's fetched client-side after authentication. Ensure no sensitive data leaks into static page props.
-   **Caching**: Be mindful of caching headers (`Cache-Control`) set for API routes or SSR pages, especially those returning sensitive information. Vercel provides some default caching; override as needed.

### Migration Path
-   **Short-term Plan**: Implement rendering strategies as defined for MVP pages.
-   **Long-term Strategy**: Can adjust strategies per page as needed. E.g., an SSG page might become ISR if content updates more frequently. Could explore On-Demand ISR if Vercel plan supports it and fine-grained updates are needed. May adopt React Server Components more heavily in the future.
-   **Rollback Plan**: Change data fetching method for a specific page (e.g., switch ISR back to SSG by removing `revalidate`, switch SSR to client-side fetching). Requires code changes and redeployment.

### Success Metrics
-   **Lighthouse Performance Score**: Target > 95 for SSG/ISR pages, > 85 for SSR admin pages.
-   **Core Web Vitals**: All pages should pass Core Web Vitals assessment in Google Search Console.
-   **Time to Interactive (TTI)**: Monitor TTI for key pages.
-   **Build Time**: Keep production build times reasonable (e.g., < 5 minutes).

### Dependencies
-   **Depends on**: ADR-Nextjs-Frontend-Framework, ADR-Supabase-Backend (for data fetching).
-   **Influences**: Implementation of all page components, data fetching logic, deployment configuration (build process).

### Review Trigger
Re-evaluate this decision if:
-   Core Web Vitals scores consistently fail for key pages.
-   Build times become excessively long (> 10 minutes).
-   Content update requirements change drastically (e.g., needing real-time updates on currently static pages).
-   Next.js introduces fundamentally different recommended rendering patterns (e.g., widespread adoption of stable Server Components changes best practices).

### References
-   Project Specifications ยง3.3 (Rendering Strategy) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง4.1.3 (State Management) ([docs/project_specifications.md](docs/project_specifications.md))
-   Next.js Data Fetching Documentation: [https://nextjs.org/docs/basic-features/data-fetching/overview](https://nextjs.org/docs/basic-features/data-fetching/overview)
-   Next.js Rendering Overview: [https://nextjs.org/docs/basic-features/pages#rendering](https://nextjs.org/docs/basic-features/pages#rendering)

```mermaid
graph TD
    A[Hybrid Rendering] --> B(Performance);
    A --> C(SEO);
    A --> D(Data Freshness);
    A ==> E(Complexity);
    style A fill:#8a2be2,stroke:#4b0082,stroke-width:2px, color:#fff
    style E fill:#fbbc04
```

```mermaid
flowchart TD
    subgraph "Page Types"
        Static[Static Pages (/, /about, /faq)] -- SSG --> BuildTime[Build Time];
        Periodic[Periodic Content (/workshops)] -- ISR --> BuildTime & Revalidate[Build Time + Revalidation];
        Admin[Admin Pages (/admin/*)] -- SSR --> RequestTime[Request Time];
        InteractiveUI[Interactive UI (Filters)] -- CSR --> BrowserTime[Browser Runtime];
    end
    BuildTime --> EdgeCache[Edge Cache];
    Revalidate --> EdgeCache;
    RequestTime --> DynamicRender[Dynamic Render];
    BrowserTime --> DynamicRender;
    EdgeCache --> User;
    DynamicRender --> User;

    style Static fill:#34a853
    style Periodic fill:#fbbc04
    style Admin fill:#ea4335
    style InteractiveUI fill:#4285f4
```

## Version History
| Version | Date       | Author        | Changes                                                                 |
|---------|------------|---------------|-------------------------------------------------------------------------|
| 1.0     | 2025-03-30 | Unknown       | Initial version (from context file).                                    |
| 1.1     | 2025-03-30 | Roo (AI)      | Updated to match standard template; added Success Metrics, Version History, refined details. |

================================================================================
FILE: docs/adr/2025-03-30-mvp-data-flow-architecture.md
TYPE: documentation
SIZE: 9576 bytes
LAST MODIFIED: 2025-03-30T18:11:32.164299
================================================================================

# MVP Data Flow Architecture

*Version: 1.0*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Proposed - 2025-03-30

### Context
This ADR describes the end-to-end flow of key data within the Philosothon Event Platform for the Minimum Viable Product (MVP) phase. It focuses primarily on the flow of **registration data** (from participant submission to admin review) and **content data** (from storage to public display). Understanding these flows is crucial for ensuring components integrate correctly and data integrity is maintained, especially given the manual steps involved in the MVP registration process.

### Decision Drivers
- **Clarity**: Need a clear overview of how data moves between different system components (Google Forms, Next.js, Supabase, Admin).
- **MVP Constraints**: Architecture must reflect the decisions made for rapid implementation, including the manual registration data import.
- **Integration Points**: Identify key points where data is transferred or transformed between systems.
- **Maintainability**: Documenting the flow helps future developers understand the system.

### Decision
The MVP data flow will be characterized by two main streams:
1.  **Registration Data Flow**: Participants submit via embedded Google Form -> Data lands in Google Sheet -> Admin manually exports CSV -> Admin manually imports sanitized CSV into Supabase `registrations` table -> Admin views/manages data via protected Next.js Admin UI.
2.  **Content Data Flow**: Admin manages content (themes, workshops, FAQ) via protected Next.js Admin UI -> Updates are saved to Supabase tables (`themes`, `workshops`, `faq_items`) via Admin API routes -> Public Next.js pages fetch this content at build time (SSG/ISR) or request time (SSR) directly from Supabase for display.

Key implementation aspects include:
- Clear separation between the public content fetching path and the admin content/registration management path.
- Reliance on manual processes for the registration data transfer from Google Sheets to Supabase in MVP.
- Use of Next.js API routes for admin write operations and potentially for public read operations (though direct DB access server-side is preferred for performance).

### Alternatives Considered
1.  **Fully Automated Registration Flow (MVP)**: Using webhooks (Google Apps Script or Zapier) to push Google Form submissions directly to a Next.js API endpoint that writes to Supabase.
    *   *Pros*: Eliminates manual steps, real-time data availability.
    *   *Cons*: Significantly higher implementation complexity and time required, exceeding MVP constraints; adds more potential points of failure. Rejected per ADR-Google-Forms-Registration.
2.  **Content Managed via Git (Markdown)**: Storing content in Markdown files within the Git repository.
    *   *Pros*: Simpler data fetching for SSG; version controlled content.
    *   *Cons*: Requires developer intervention for content updates; less suitable for structured data relationships. Rejected per ADR-Content-Management-Strategy.

### Consequences
-   **Positive**:
    *   Achievable within the MVP timeline by deferring automation complexity.
    *   Clear separation of concerns between registration capture (Google) and platform display/management (Next.js/Supabase).
    *   Leverages strengths of chosen tools (Google Forms for complex forms, Supabase for structured data, Next.js for rendering).
-   **Negative**:
    *   Registration data in the admin dashboard is not real-time (updated weekly).
    *   Manual registration data import is labor-intensive and prone to human error.
    *   Potential for inconsistencies if manual processes are not followed carefully.
-   **Risks**:
    *   Errors during CSV export/import corrupting registration data.
    *   Delays in manual processing leading to outdated information for admins.
    *   Security risks if CSV files containing PII are handled insecurely during manual transfer.
-   **Mitigations**:
    *   Detailed documentation and checklist for the manual export/import process.
    *   CSV validation/sanitization script (as mentioned in ADR-Google-Forms-Registration).
    *   Secure handling procedures for exported CSV files (encryption, limited access).
    *   Regular audits comparing Google Sheet data with Supabase data.

### Implementation Details
-   **Registration Flow**:
    1.  Google Form embedded in `/register` page.
    2.  Submissions populate linked Google Sheet.
    3.  Weekly: Admin exports Sheet to CSV.
    4.  Weekly: Admin runs sanitization script on CSV.
    5.  Weekly: Admin uses Supabase Studio/pgAdmin or a simple custom import function (Phase 1.5) to upload CSV data into `registrations` table.
    6.  `/admin/registrations` page fetches data from Supabase `registrations` table.
-   **Content Flow**:
    1.  Admin accesses `/admin/content/*` pages.
    2.  UI fetches current content from Supabase via admin API routes or direct server-side calls.
    3.  Admin submits changes via forms.
    4.  Admin UI sends PUT/POST requests to `/api/admin/content/*` routes.
    5.  API routes validate data and update Supabase tables (`themes`, `workshops`, `faq_items`).
    6.  Public pages (`/themes`, `/workshops`, `/faq`) fetch data from Supabase using `getStaticProps` (with ISR for workshops). Vercel rebuilds/revalidates pages as needed.

### Security Considerations
-   **Registration Data Transfer**: The manual CSV transfer is a critical point. Ensure secure methods are used (e.g., encrypted transfer, deletion after import). Minimize PII in the export if possible.
-   **API Security**: Admin API routes for content/registration management must be strictly protected via authentication checks (ADR-Admin-Authentication). Public content API routes should be read-only.
-   **Database Access**: RLS policies in Supabase provide a crucial layer of defense for both content and registration data (ADR-Supabase-Backend).

### Migration Path
-   **Short-term Plan**: Implement manual registration flow and DB-driven content flow for MVP.
-   **Long-term Strategy (Phase 2+)**: Automate the registration flow using webhooks and API endpoints to eliminate manual CSV handling (as detailed in ADR-Google-Forms-Registration migration path). Content flow likely remains similar unless migrating to a Headless CMS (ADR-Content-Management-Strategy migration path).
-   **Rollback Plan**: Revert to previous database backups if data corruption occurs. If automation fails, revert to the documented manual process.

### Success Metrics
-   **Registration Data Latency**: Time between form submission and data availability in admin UI is within the expected weekly cycle.
-   **Data Integrity**: < 1% discrepancy rate between Google Sheet source and Supabase registration data after import.
-   **Content Update Propagation**: Content changes made via admin UI are reflected on the live site within the expected ISR revalidation window (e.g., 6 hours for workshops) or after the next build/deployment.

### Dependencies
-   **Depends on**: ADR-Google-Forms-Registration, ADR-Supabase-Backend, ADR-Admin-Authentication, ADR-Content-Management-Strategy, ADR-Nextjs-Frontend-Framework, ADR-Hybrid-Rendering.
-   **Influences**: Overall system integration testing, operational procedures documentation.

### Review Trigger
Re-evaluate this data flow if:
-   The manual registration import process proves unsustainable due to volume or error rate.
-   Real-time registration data becomes a critical requirement for admins.
-   The content structure or update frequency changes dramatically.

### References
-   Project Specifications ยง3.2 (High-Level Architecture) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง6.2 (Operations Processes) ([docs/project_specifications.md](docs/project_specifications.md))
-   All previously created ADRs for specific components.

```mermaid
graph TD
    A[MVP Data Flow] --> B(Clear Separation);
    A --> C(Leverages Chosen Tools);
    A --> D(Achievable in MVP);
    A ==> E(Manual Registration Step);
    A ==> F(Data Latency);
    style A fill:#d3d3d3,stroke:#a9a9a9,stroke-width:2px
    style E fill:#fbbc04
    style F fill:#fbbc04
```

```mermaid
sequenceDiagram
    participant P as Participant
    participant FE as Next.js Frontend
    participant GF as Google Forms/Sheets
    participant Adm as Admin User
    participant API as Next.js API Routes
    participant DB as Supabase DB

    P->>+FE: Visits /register
    FE->>P: Displays embedded Google Form
    P->>+GF: Submits Registration Form
    GF-->>P: Confirmation
    Note over GF: Data saved in Google Sheet

    loop Weekly Process
        Adm->>GF: Export Data to CSV
        Adm->>Adm: Sanitize CSV (Script)
        Adm->>+DB: Manual Import CSV
        DB-->>Adm: Import Confirmation
    end

    Adm->>+FE: Visits /admin/*
    FE-->>Adm: Renders Admin UI
    FE->>+API: Fetch Data (e.g., Registrations, Content)
    API->>+DB: Query Data
    DB-->>API: Return Data
    API-->>FE: Return Data
    FE-->>Adm: Display Data

    Adm->>FE: Edits Content
    FE->>+API: PUT /api/admin/content/*
    API->>API: Validate Auth & Data
    API->>+DB: Update Content Record
    DB-->>API: Update Confirmation
    API-->>FE: Update Confirmation
    FE-->>Adm: UI Update

    Note over FE, DB: Public pages fetch content via SSG/ISR/SSR
```

## Version History
| Version | Date       | Author        | Changes             |
|---------|------------|---------------|---------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial draft       |

================================================================================
FILE: docs/adr/2025-03-30-nextjs-frontend-framework.md
TYPE: documentation
SIZE: 8176 bytes
LAST MODIFIED: 2025-03-30T18:08:47.411157
================================================================================

# Next.js Frontend Framework

*Version: 1.0*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Proposed - 2025-03-30

### Context
The Philosothon Event Platform requires a modern, performant, and maintainable frontend framework to build the public-facing website and the simple admin interface. Key requirements include good SEO for public pages, efficient development workflow, and the ability to handle both static content and dynamic data fetching for admin areas.

### Decision Drivers
- **SEO Requirements**: Public information pages (Home, About, Themes, Workshops, FAQ) need to be easily indexable by search engines.
- **Development Efficiency**: The 2-day MVP timeline necessitates a framework that enables rapid development and iteration. File-based routing and integrated tooling are highly desirable.
- **Performance**: Need fast load times and good Core Web Vitals scores for user experience and SEO.
- **Team Expertise**: Development team has strong experience with React.
- **Future Scalability**: Architecture should accommodate future backend integration (API routes) and potentially more complex state management.

### Decision
We will use **Next.js** as the primary frontend framework for building the Philosothon Event Platform. We will leverage its hybrid rendering capabilities (SSG, SSR, ISR), file-based routing, integrated API routes, and React ecosystem compatibility.

Key implementation aspects include:
- Utilizing file-based routing (`pages` or `app` directory) for defining application routes.
- Employing Static Site Generation (SSG) for largely static content pages.
- Using Server-Side Rendering (SSR) or client-side fetching protected by authentication for admin pages.
- Leveraging API routes for backend interactions (e.g., communication with Supabase).

### Alternatives Considered
1.  **Create React App (CRA) / Vite + React (SPA)**:
    *   *Pros*: Mature ecosystem, strong team familiarity with React.
    *   *Cons*: Client-side rendering (CSR) by default, leading to poor initial SEO performance without pre-rendering solutions; requires separate routing library; no built-in API routes.
2.  **Static Site Generators (e.g., Gatsby, Astro)**:
    *   *Pros*: Excellent performance and SEO for static content; often integrate well with Markdown/CMS.
    *   *Cons*: Can be less flexible for highly dynamic applications or complex authenticated sections compared to Next.js; might require different paradigms for admin interface (e.g., separate SPA). Astro is newer, potentially smaller community support.
3.  **WordPress**:
    *   *Pros*: Very mature platform, vast plugin ecosystem, easy content management for non-technical users.
    *   *Cons*: Can be overkill for this project's scope; performance optimization can be challenging; less alignment with team's React expertise; potential security concerns with plugins.

### Consequences
-   **Positive**:
    *   Excellent SEO performance out-of-the-box due to pre-rendering options (SSG/SSR).
    *   Rapid development facilitated by file-based routing, Fast Refresh, and integrated tooling.
    *   Optimal performance through hybrid rendering strategies (documented in ADR-Hybrid-Rendering).
    *   Unified framework for both frontend and simple backend API needs (API routes).
    *   Leverages existing team expertise in React.
-   **Negative**:
    *   Can have a slightly steeper learning curve than basic React SPAs for understanding rendering methods and data fetching patterns.
    *   Build times can increase for larger sites with many SSG pages.
    *   Requires Node.js environment for development and deployment (managed by Vercel).
-   **Risks**:
    *   Over-complicating data fetching strategies if not carefully planned.
    *   Potential vendor lock-in with Vercel-specific features (though core Next.js is open-source).
-   **Mitigations**:
    *   Follow Next.js best practices for data fetching documented in ADR-Hybrid-Rendering.
    *   Utilize Incremental Static Regeneration (ISR) to manage build times for frequently updated static content.
    *   Prioritize standard Next.js features over Vercel-specific optimizations where possible if portability is a major long-term concern.

### Implementation Details
-   **Project Setup**: Initialize using `create-next-app`.
-   **Routing**: Use the `pages` directory router for simplicity in MVP (or `app` router if team prefers and understands its paradigms).
-   **Data Fetching**: Implement `getStaticProps` for SSG pages, `getServerSideProps` for SSR admin pages (or client-side fetching with SWR/React Query after auth check). See ADR-Hybrid-Rendering.
-   **API Routes**: Place backend logic interacting with Supabase within `/pages/api/*`.
-   **Styling**: Utilize Tailwind CSS (see ADR-TailwindCSS).
-   **State Management**: Primarily rely on React Context API for global state (e.g., theme, auth status) and server components/props for page data. Minimize client-side state.

### Security Considerations
-   **API Routes**: Secure API routes intended for admin use by checking Supabase authentication status server-side.
-   **Environment Variables**: Use Next.js built-in support for environment variables (`.env.local`) to store sensitive keys (e.g., Supabase service_role key). Ensure `NEXT_PUBLIC_` prefix is only used for non-sensitive, browser-exposed variables.
-   **Cross-Site Scripting (XSS)**: React/Next.js inherently mitigate some XSS risks through JSX encoding, but care must be taken when using `dangerouslySetInnerHTML` or handling user-generated content.
-   **Dependencies**: Keep Next.js and its dependencies updated to patch security vulnerabilities.

### Migration Path
-   **Short-term Plan**: Build MVP using the chosen routing and rendering strategies.
-   **Long-term Strategy**: Can incrementally adopt newer Next.js features (e.g., Server Components if starting with `pages` router). API routes can be expanded or migrated to dedicated backend services if complexity grows significantly.
-   **Rollback Plan**: Difficult to roll back framework choice entirely. Issues would likely be addressed by fixing implementation within Next.js or adjusting rendering/data fetching strategies.

### Success Metrics
-   **Lighthouse Performance Score**: Target > 90 for public pages.
-   **Development Time**: Achieve MVP frontend completion within the allocated 1.5 days (approx).
-   **SEO Ranking**: Monitor basic keyword ranking improvements post-launch.

### Dependencies
-   **Depends on**: React library knowledge.
-   **Influences**: ADR-Hybrid-Rendering, ADR-TailwindCSS, ADR-Vercel-Deployment, ADR-Admin-Authentication (integration with protected routes), ADR-Supabase-Backend (data fetching integration).

### Review Trigger
Re-evaluate this decision if:
-   Core requirements shift significantly towards a purely static site with no dynamic/admin features.
-   Performance issues arise that cannot be resolved through Next.js optimization techniques.
-   The need for complex, non-Node.js backend logic becomes primary.

### References
-   Project Specifications ยง3.1 (Frontend Framework) ([docs/project_specifications.md](docs/project_specifications.md))
-   Next.js Documentation: [https://nextjs.org/docs](https://nextjs.org/docs)

```mermaid
graph TD
    A[Next.js] --> B(SEO via Pre-rendering);
    A --> C(Developer Experience);
    A --> D(Performance);
    A --> E(React Ecosystem);
    A ==> F(Learning Curve);
    style A fill:#0070f3,stroke:#000,stroke-width:2px,color:#fff
    style F fill:#fbbc04
```

```mermaid
flowchart LR
    subgraph "Next.js Application"
        direction TB
        FS[File System Routing] --> Pages[Pages/Components];
        Pages -- Uses --> React;
        Pages -- Data Fetching --> DataSources[SSG/SSR/ISR/Client];
        API[API Routes] -- Server-side Logic --> External[External Services e.g., Supabase];
        DataSources --> API;
        DataSources --> External;
    end
    style React fill:#61DAFB
```

## Version History
| Version | Date       | Author        | Changes             |
|---------|------------|---------------|---------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial draft       |

================================================================================
FILE: docs/adr/2025-03-30-supabase-backend.md
TYPE: documentation
SIZE: 10906 bytes
LAST MODIFIED: 2025-03-30T18:07:44.629534
================================================================================

# Supabase Backend Service

*Version: 1.1*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Approved - 2025-03-30

### Context
Need a backend-as-a-service (BaaS) solution for the Philosothon platform that:
- Supports rapid development for the 2-day MVP timeline.
- Provides a robust relational database (PostgreSQL).
- Includes built-in, secure authentication suitable for admin-only access initially.
- Offers auto-generated APIs to minimize backend coding effort.
- Scales cost-effectively from a small initial user base.

### Decision Drivers
- **Development Speed**: Need to minimize backend setup and API development time.
- **Team Expertise**: Team has strong React/Next.js skills, less dedicated backend experience.
- **Future Needs**: Anticipated future requirements for real-time features (notifications) and more complex data relationships (team formation, submissions).
- **Cost**: Free tier must be sufficient for MVP and initial event scale.
- **Security**: Must meet University data security requirements for handling potentially sensitive registration data (even if anonymized initially).

### Decision
We will adopt **Supabase** as the primary backend service, utilizing its integrated PostgreSQL database, authentication (Auth), auto-generated RESTful APIs (PostgREST), and potential for real-time subscriptions.

Key implementation aspects include:
- Using Supabase-managed PostgreSQL for all persistent data (content, registrations).
- Implementing Row-Level Security (RLS) policies on all tables containing sensitive data.
- Utilizing Supabase Auth for email-based magic link authentication for administrators.
- Interacting with the database primarily via the Supabase client libraries (`@supabase/supabase-js`) within Next.js API routes and server components.

### Alternatives Considered
1.  **Firebase (Firestore + Auth)**:
    *   *Pros*: Excellent real-time capabilities; mature ecosystem; generous free tier.
    *   *Cons*: NoSQL (Firestore) less ideal for relational event data (registrations, themes, workshops); potential query limitations compared to SQL.
2.  **Custom Node.js API (e.g., Express/NestJS + PostgreSQL)**:
    *   *Pros*: Full control over architecture, performance, and logic; no vendor lock-in.
    *   *Cons*: Estimated 3-week development time for basic API and auth, far exceeding MVP timeline; requires significant backend development and maintenance effort.
3.  **Airtable as Backend**:
    *   *Pros*: Very easy-to-use spreadsheet-like interface for data management; simple form integration.
    *   *Cons*: Not designed as a primary application backend; potential API rate limits and performance issues at scale; less robust querying capabilities than SQL.

### Consequences
-   **Positive**:
    *   Instant REST API endpoints generated directly from database schema, saving significant development time.
    *   Built-in, secure user authentication simplifies admin access control.
    *   Integrated PostgreSQL provides robust relational data modeling.
    *   Free tier is sufficient for MVP scale and likely the first few events.
    *   Real-time capabilities available for future features (Phase 2+).
-   **Negative**:
    *   Introduces vendor lock-in, although Supabase is built on open-source components (Postgres, PostgREST, GoTrue).
    *   Requires learning Supabase-specific concepts (RLS, client libraries).
    *   Potential learning curve for team members unfamiliar with PostgreSQL.
-   **Risks**:
    *   Unforeseen scaling costs if usage exceeds free tier limits unexpectedly.
    *   Supabase platform outages or service degradation impacting the application.
    *   Complexity in designing effective Row-Level Security policies.
-   **Mitigations**:
    *   Implement automated daily database backups via Supabase dashboard settings (point-in-time recovery available on paid plans). Supplement with periodic manual `pg_dump` exports for critical milestones.
    *   Monitor usage closely against free tier limits; establish budget for potential upgrade.
    *   Utilize Supabase status page and implement frontend error handling for backend unavailability.
    *   Conduct thorough testing of RLS policies.

### Implementation Details
-   **Database Schema**: Defined in `docs/project_specifications.md` ยง4.3. Enforce NOT NULL constraints and foreign keys where appropriate.
-   **RLS Policies**: Implement default-deny policies on tables like `registrations`. Grant specific SELECT, INSERT, UPDATE, DELETE permissions based on user roles (initially just 'admin' via Supabase Auth).
-   **Next.js Integration**:
    *   Use `@supabase/supabase-js` library for all interactions.
    *   Initialize Supabase client server-side (for API routes, server components) using service role key (stored securely in environment variables).
    *   Initialize Supabase client client-side (for browser interactions) using anon key.
    *   Fetch data in server components (`async function Page()`) or API routes. Use client-side fetching (e.g., SWR with Supabase client) for dynamic UI elements requiring user-specific data after login.
-   **Admin Access**: Use Supabase pgAdmin interface for direct database access during development and for emergency data management. Limit production direct access.
-   **Serverless Functions**: Utilize Supabase Edge Functions (Deno-based) for any complex backend logic not suitable for direct client-DB interaction or simple API routes (e.g., future automated import/validation).

### Security Considerations
-   **Connections**: Enforce TLS 1.3 for all database connections (Supabase default).
-   **Credentials**: Store Supabase API keys (anon, service_role) securely using environment variables (e.g., Vercel environment variables). Never expose service_role key client-side.
-   **RLS**: Primary mechanism for data access control within the database. Policies must be carefully crafted and tested.
-   **Vulnerability Scanning**: Rely on Supabase platform security; supplement with application-level security testing (e.g., OWASP ZAP scans against frontend/API).
-   **Backups**: Daily automated backups configured in Supabase. Retention period: 7 days (default free tier). Consider longer retention via manual exports or paid plan.
-   **Data Retention**: Implement application-level logic or database triggers/policies to enforce data retention requirements (e.g., anonymize or delete registration data after X months post-event, aligning with University policy).

### Migration Path
-   **Short-term Plan**: Implement core schema, RLS for admin access, and integrate client library in Next.js for MVP features.
-   **Long-term Strategy**:
    1.  Optimize complex queries using database views or functions.
    2.  Implement read replicas if read traffic becomes a bottleneck (requires paid plan).
    3.  Configure connection pooling (e.g., using Supavisor) if connection limits are reached (requires paid plan).
    4.  Consider database sharding only if single-node limits are exceeded (very unlikely scenario).
-   **Vendor Lock-in Mitigation**: Since Supabase uses standard PostgreSQL, migration to self-hosted Postgres or another managed provider is feasible. Requires replacing Supabase Auth and potentially rewriting RLS as application logic or different database policies. Regular `pg_dump` exports facilitate this.
-   **Rollback Plan**: Revert to previous database backup. Application code changes would need to be reverted via Git.

### Success Metrics
-   **API Response Time**: Target P95 response time < 200ms for common read queries (e.g., fetching themes, workshops).
-   **Database Connection Errors**: Monitor for connection errors; target < 0.1% error rate.
-   **Development Velocity**: Track time saved by not building custom backend API/auth (compare against estimate for custom build).
-   **Cost**: Remain within Supabase free tier limits for the first 6 months post-launch.

### Dependencies
-   **Depends on**: ADR-001 (Next.js Frontend - Assumed, needs creation) for client interaction.
-   **Influences**: ADR-004 (Admin Authentication), ADR-006 (Data Flow Architecture), All data-driven features (Content Management, Registration Display, Future Team Formation).

### Review Trigger
Reassess this decision if:
-   Daily active users consistently exceed 1000 (may require performance optimization or plan upgrade).
-   Query complexity significantly increases, requiring features beyond basic SQL/PostgREST capabilities.
-   Supabase pricing model changes detrimentally or service reliability degrades significantly.
-   Core application requirements shift away from a relational data model.

### References
-   Project Specifications ยง3.1 (Database) ([docs/project_specifications.md](docs/project_specifications.md))
-   Project Specifications ยง4.3 (Database Schema) ([docs/project_specifications.md](docs/project_specifications.md))
-   Supabase Documentation: [https://supabase.com/docs](https://supabase.com/docs)
-   Supabase Row Level Security: [https://supabase.com/docs/guides/auth/row-level-security](https://supabase.com/docs/guides/auth/row-level-security)
-   Supabase Backups: [https://supabase.com/docs/guides/platform/backups](https://supabase.com/docs/guides/platform/backups)

```mermaid
graph TD
    A[Supabase BaaS] --> B(PostgreSQL DB);
    A --> C(GoTrue Auth);
    A --> D(PostgREST API);
    A --> E(Realtime Engine);
    A ==> F(Rapid Development);
    A ==> G(Vendor Lock-in Risk);
    style A fill:#3ecf8e,stroke:#277c5c,stroke-width:2px
    style F fill:#9cf
    style G fill:#fbbc04
```

```mermaid
flowchart LR
    subgraph "Next.js Frontend"
        direction TB
        Browser --> ClientComp[Client Components];
        Server --> ServerComp[Server Components];
        Server --> APIRoute[API Routes];
    end

    subgraph "Supabase Backend"
        direction TB
        Auth[Auth (GoTrue)]
        DB[(PostgreSQL DB + RLS)]
        API[Auto-Generated API (PostgREST)]
        RT[Realtime Engine]
    end

    ClientComp -- `@supabase/js` --> Auth;
    ClientComp -- `@supabase/js` --> API;
    ClientComp -- `@supabase/js` --> RT;
    ServerComp -- `@supabase/js (Service Key)` --> DB;
    APIRoute -- `@supabase/js (Service Key)` --> DB;
    API -- Reads/Writes --> DB;
    Auth -- Manages Users --> DB;

    style DB fill:#3ecf8e,stroke:#277c5c
```

## Version History
| Version | Date       | Author        | Changes                                                                 |
|---------|------------|---------------|-------------------------------------------------------------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial version based on project specs.                                   |
| 1.1     | 2025-03-30 | Roo (AI)      | Added Implementation, Security, Migration, Success Metrics, Version History sections. Expanded details on backups, retention, Next.js integration, performance. |

================================================================================
FILE: docs/adr/2025-03-30-tailwind-css-framework.md
TYPE: documentation
SIZE: 8316 bytes
LAST MODIFIED: 2025-03-30T18:09:14.508097
================================================================================

# Tailwind CSS UI Framework

*Version: 1.0*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Proposed - 2025-03-30

### Context
The Philosothon Event Platform requires a styling solution for the Next.js frontend that enables rapid development, ensures consistency, is highly customizable, and performs well. The team needs to build both public-facing pages and a simple admin interface within a tight timeframe.

### Decision Drivers
- **Development Speed**: The 2-day MVP timeline demands a styling approach that minimizes context switching and allows for quick iteration directly within the markup.
- **Customization**: Need the ability to implement the specific design system (colors, typography) defined in the project specifications (ยง4.4) without fighting framework defaults.
- **Performance**: Avoid shipping unused CSS to the client; minimize CSS bundle size.
- **Maintainability**: Utility-first approach can lead to consistent styling application, especially with component-based frameworks like React/Next.js.
- **AI Assistance**: The project specifications note Tailwind CSS works well with AI code assistance (ยง3.1), potentially speeding up component styling.

### Decision
We will use **Tailwind CSS** as the primary CSS framework for styling the Next.js application. We will leverage its utility-first approach, JIT (Just-In-Time) compiler for performance, and configuration options to implement the project's design system.

Key implementation aspects include:
- Installing and configuring Tailwind CSS within the Next.js project.
- Defining the project's color palette, fonts, and spacing in `tailwind.config.js`.
- Applying utility classes directly to HTML/JSX elements for styling.
- Extracting reusable component styles using `@apply` or by creating dedicated React components with pre-applied styles where appropriate.

### Alternatives Considered
1.  **Component Libraries (e.g., Material UI, Chakra UI, Bootstrap)**:
    *   *Pros*: Provide pre-built, accessible components, potentially speeding up development initially; enforce design consistency.
    *   *Cons*: Can be harder to customize to a specific design system; often ship with significant JavaScript, potentially impacting performance; may introduce opinions about component structure.
2.  **CSS Modules / Styled Components / Emotion (CSS-in-JS)**:
    *   *Pros*: Scoped styling prevents class name collisions; allows dynamic styling based on props; leverages JavaScript for styling logic.
    *   *Cons*: Can involve more context switching between markup and styles; potentially larger runtime overhead compared to utility classes; CSS Modules lack easy reuse of styles across components without composition.
3.  **Plain CSS / SASS**:
    *   *Pros*: Full control, no framework overhead.
    *   *Cons*: Requires manual creation of design system utilities and components; higher risk of inconsistent styling; potentially slower development speed for MVP without established conventions.

### Consequences
-   **Positive**:
    *   Rapid styling directly in markup, reducing context switching.
    *   Highly optimized CSS output due to JIT compiler (only generates used styles).
    *   Easy implementation and enforcement of the project's specific design system via configuration.
    *   Excellent compatibility with component-based architecture (React/Next.js).
    *   Potentially faster styling with AI code completion tools familiar with Tailwind.
-   **Negative**:
    *   Can lead to verbose HTML/JSX with many utility classes, potentially impacting readability for those unfamiliar.
    *   Requires learning the utility class names and Tailwind's conventions.
    *   Initial setup and configuration required.
-   **Risks**:
    *   Inconsistent application of utilities if component abstraction isn't used for complex elements.
    *   Potential for large configuration files if not managed well.
-   **Mitigations**:
    *   Encourage creation of reusable React components for complex UI elements to encapsulate styling logic.
    *   Use Tailwind plugins or `@apply` sparingly for common style combinations.
    *   Provide team training or resources on Tailwind best practices.
    *   Regularly review `tailwind.config.js` for clarity and organization.

### Implementation Details
-   **Installation**: Follow official Next.js + Tailwind CSS installation guide.
-   **Configuration (`tailwind.config.js`)**:
    *   Define `theme.extend` with colors, fonts (serif, sans-serif, mono), and potentially spacing/breakpoints from project specs (ยง4.4).
    *   Ensure content paths correctly scan all relevant component/page files.
-   **Base Styles**: Use a global CSS file (`globals.css`) for base element styles (e.g., body background, font smoothing) and potentially `@layer base` directives.
-   **Component Styling**: Apply utilities directly in JSX. For repeated patterns (e.g., buttons, cards), create React components that accept props for variations but encapsulate the core Tailwind classes.
-   **Purging**: Handled automatically by the JIT compiler based on scanned file content.

### Security Considerations
-   Tailwind CSS itself has minimal direct security implications as it primarily generates static CSS.
-   Indirectly, ensure that any dynamic class generation based on user input is properly sanitized to prevent potential injection vulnerabilities (though this is generally an application logic concern, not specific to Tailwind).

### Migration Path
-   **Short-term Plan**: Implement all MVP styling using Tailwind utilities and configuration.
-   **Long-term Strategy**: Continue using Tailwind. If needed, introduce a complementary component library (e.g., Headless UI) that integrates well with Tailwind for complex interactive elements (modals, dropdowns) while maintaining styling control.
-   **Rollback Plan**: Extremely difficult to roll back entirely. Would require rewriting all styling using a different methodology (e.g., CSS Modules, plain CSS). Issues would likely be addressed by refactoring components or adjusting Tailwind usage patterns.

### Success Metrics
-   **Styling Development Time**: Subjective measure - team feedback indicates faster styling compared to previous methods.
-   **CSS Bundle Size**: Keep production CSS bundle size minimal (e.g., < 50KB gzipped).
-   **Design Consistency**: Visual review confirms consistent application of design system across pages/components.

### Dependencies
-   **Depends on**: ADR-Nextjs-Frontend-Framework. Requires Node.js/npm environment.
-   **Influences**: All frontend components and pages.

### Review Trigger
Re-evaluate this decision if:
-   Team productivity significantly decreases due to Tailwind's learning curve or verbosity.
-   Performance issues arise specifically related to CSS parsing/rendering that cannot be resolved with Tailwind optimizations.
-   A need arises for complex, themeable components that are significantly easier to implement with a pre-built component library.

### References
-   Project Specifications ยง3.1 (UI Framework) ([docs/project_specifications.md](docs/project_specifications.md))
-   Tailwind CSS Documentation: [https://tailwindcss.com/docs](https://tailwindcss.com/docs)
-   Tailwind CSS with Next.js Guide: [https://tailwindcss.com/docs/guides/nextjs](https://tailwindcss.com/docs/guides/nextjs)

```mermaid
graph TD
    A[Tailwind CSS] --> B(Rapid Development);
    A --> C(Customization);
    A --> D(Performance via JIT);
    A --> E(Design System Consistency);
    A ==> F(HTML Verbosity);
    A ==> G(Learning Curve);
    style A fill:#38bdf8,stroke:#0ea5e9,stroke-width:2px
    style F fill:#fbbc04
    style G fill:#fbbc04
```

```mermaid
flowchart LR
    Dev[Developer] -- Writes --> JSX[React Component JSX];
    JSX -- Contains --> Utils[Utility Classes e.g., `p-4 bg-blue-500`];
    Tailwind[Tailwind JIT Compiler] -- Scans --> JSX;
    Tailwind -- Generates --> CSS[Optimized CSS File];
    Browser -- Loads --> CSS;
    Browser -- Renders --> StyledUI[Styled UI Element];
    JSX -- Renders --> StyledUI;

    style Tailwind fill:#38bdf8
```

## Version History
| Version | Date       | Author        | Changes             |
|---------|------------|---------------|---------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial draft       |

================================================================================
FILE: docs/adr/2025-03-30-vercel-deployment-platform.md
TYPE: documentation
SIZE: 8459 bytes
LAST MODIFIED: 2025-03-30T18:09:39.769958
================================================================================

# Vercel Deployment Platform

*Version: 1.0*
*Date: 2025-03-30*
*Author: Roo (AI Architect)*

## Status
Proposed - 2025-03-30

### Context
The Philosothon Event Platform, built with Next.js, requires a reliable, performant, and easy-to-use platform for deployment and hosting. Key requirements include seamless integration with Next.js features, automated deployments from a Git repository, preview deployments for reviewing changes, and cost-effectiveness for a small-scale event website.

### Decision Drivers
- **Next.js Optimization**: Need a platform specifically optimized for hosting Next.js applications, handling its various rendering modes (SSG, SSR, ISR, API routes) efficiently.
- **Developer Experience**: Desire for automated CI/CD pipeline triggered by Git pushes, easy configuration, and fast deployments.
- **Preview Deployments**: Need the ability to easily preview changes from feature branches before merging to production.
- **Performance**: Global CDN and edge network required for fast content delivery worldwide.
- **Cost**: Free tier must be sufficient for MVP and initial event traffic.

### Decision
We will use **Vercel** as the deployment and hosting platform for the Next.js application. We will leverage its direct integration with GitHub, automated CI/CD pipeline, preview deployments, global edge network, and optimizations specifically for Next.js.

Key implementation aspects include:
- Connecting the project's GitHub repository to a Vercel project.
- Configuring build settings and environment variables within the Vercel dashboard.
- Utilizing Vercel's automatic deployments for the main branch (production) and preview deployments for pull requests/feature branches.
- Mapping a custom domain to the Vercel deployment.

### Alternatives Considered
1.  **Netlify**:
    *   *Pros*: Strong competitor, also offers Git integration, CI/CD, preview deployments, global CDN, generous free tier. Good support for various frameworks.
    *   *Cons*: While support for Next.js is good, Vercel (as the creators of Next.js) often has tighter integration and day-one support for new Next.js features. Potential complexities with certain Next.js features like middleware or ISR compared to Vercel.
2.  **AWS (e.g., Amplify, S3+CloudFront+Lambda@Edge)**:
    *   *Pros*: Highly scalable, flexible, part of the extensive AWS ecosystem.
    *   *Cons*: Significantly more complex configuration and steeper learning curve compared to Vercel/Netlify; potentially higher cost if not managed carefully; requires manual setup of CI/CD pipeline and CDN.
3.  **GitHub Pages**:
    *   *Pros*: Free, simple for purely static sites, directly integrated with GitHub.
    *   *Cons*: Primarily designed for static sites; does not support SSR, ISR, or API routes required by Next.js dynamic features and admin interface.
4.  **Self-Hosting (e.g., Docker on VPS)**:
    *   *Pros*: Full control over the environment.
    *   *Cons*: Requires significant infrastructure management (server setup, maintenance, security, scaling, CI/CD pipeline); higher operational overhead and cost; slower deployment cycles.

### Consequences
-   **Positive**:
    *   Extremely simple and fast deployment process optimized for Next.js.
    *   Automated CI/CD pipeline integrated with GitHub.
    *   Preview deployments significantly improve the development and review workflow.
    *   High performance due to Vercel's global edge network and Next.js optimizations.
    *   Free tier is sufficient for MVP needs.
    *   Automatic HTTPS/SSL certificate management.
-   **Negative**:
    *   Potential vendor lock-in specifically with Vercel's platform features (though the Next.js app itself remains portable).
    *   Usage limits on the free tier (bandwidth, build minutes, serverless function execution) could be exceeded as the site grows, requiring an upgrade to a paid plan.
-   **Risks**:
    *   Vercel platform outages impacting site availability.
    *   Unexpected costs if usage spikes significantly beyond free tier limits.
-   **Mitigations**:
    *   Monitor Vercel status page. Application designed to degrade gracefully if backend (Supabase) is unavailable, but Vercel outage affects frontend delivery.
    *   Monitor usage analytics within the Vercel dashboard. Set up billing alerts if upgrading to a paid plan.
    *   Ensure critical environment variables are securely stored in Vercel.

### Implementation Details
-   **Connection**: Link GitHub repository (`main` branch for production, feature branches for previews).
-   **Build Command**: Default Next.js build command (`next build`) usually detected automatically.
-   **Output Directory**: `.next` (usually detected automatically).
-   **Environment Variables**: Add Supabase keys (`NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY`) via Vercel project settings. Ensure `SUPABASE_SERVICE_ROLE_KEY` is NOT prefixed with `NEXT_PUBLIC_`.
-   **Custom Domain**: Configure custom domain (e.g., `philosothon.toronto.edu` - requires DNS changes) via Vercel dashboard after launch.

### Security Considerations
-   **Environment Variables**: Use Vercel's system for securely storing backend keys and other secrets. Do not commit secrets to Git.
-   **Preview Deployments**: Be aware that preview deployments might be publicly accessible by default (though with obscure URLs). Configure Vercel's access protection features (e.g., password protection, Vercel authentication) for preview deployments if sensitive pre-release content is involved.
-   **Permissions**: Manage Vercel team permissions carefully to control who can deploy or change project settings.
-   **DDoS Protection**: Vercel provides basic DDoS mitigation.

### Migration Path
-   **Short-term Plan**: Deploy MVP to Vercel.
-   **Long-term Strategy**: Continue using Vercel as long as it meets performance and cost requirements. If migration is needed (e.g., due to cost, features), the Next.js application can be deployed to other platforms supporting Node.js (e.g., Netlify, AWS Amplify, Docker container), though some Vercel-specific optimizations might be lost or require reconfiguration.
-   **Rollback Plan**: Vercel keeps previous deployments. Rolling back to a prior production deployment is straightforward via the Vercel dashboard.

### Success Metrics
-   **Deployment Time**: Target average deployment time < 5 minutes.
-   **Uptime**: Target > 99.9% uptime for the production deployment (monitored via Vercel analytics or external tool).
-   **Preview Deployment Usage**: Team actively uses preview deployments for PR reviews.

### Dependencies
-   **Depends on**: ADR-Nextjs-Frontend-Framework. Requires a Git repository (GitHub recommended).
-   **Influences**: CI/CD workflow, environment variable management.

### Review Trigger
Re-evaluate this decision if:
-   Vercel costs become prohibitive for the project budget.
-   Significant reliability issues or outages occur with the Vercel platform.
-   Core requirements necessitate features only available on other platforms (e.g., complex custom server configurations not supported by Vercel).
-   The application moves away from Next.js entirely.

### References
-   Project Specifications ยง3.1 (Deployment) ([docs/project_specifications.md](docs/project_specifications.md))
-   Vercel Documentation: [https://vercel.com/docs](https://vercel.com/docs)
-   Deploying Next.js on Vercel: [https://nextjs.org/docs/deployment](https://nextjs.org/docs/deployment)

```mermaid
graph TD
    A[Vercel Platform] --> B(Optimized for Next.js);
    A --> C(Automated CI/CD);
    A --> D(Preview Deployments);
    A --> E(Global Edge Network);
    A ==> F(Potential Vendor Lock-in);
    A ==> G(Usage Limits);
    style A fill:#555,stroke:#000,stroke-width:2px,color:#fff
    style F fill:#fbbc04
    style G fill:#fbbc04
```

```mermaid
flowchart LR
    Dev[Developer] -- Pushes Code --> GitHub[GitHub Repo];
    GitHub -- Triggers Webhook --> Vercel[Vercel Platform];
    Vercel -- Builds --> Build[Next.js Build];
    Build -- Deploys --> Edge[Vercel Edge Network];
    Edge -- Serves --> User[End User Browser];
    Vercel -- Creates --> Preview[Preview Deployment (for PRs)];

    style Vercel fill:#555, color:#fff
```

## Version History
| Version | Date       | Author        | Changes             |
|---------|------------|---------------|---------------------|
| 1.0     | 2025-03-30 | Roo (AI)      | Initial draft       |

================================================================================
FILE: docs/adr/template.md
TYPE: documentation
SIZE: 5370 bytes
LAST MODIFIED: 2025-03-30T18:06:38.170232
================================================================================

# [TITLE OF THE DECISION RECORD]

*Version: 1.0*
*Date: YYYY-MM-DD*
*Author: [Author Name]*

## Status
[Proposed | Approved | Deprecated | Superseded by ADR-XXX] - YYYY-MM-DD

### Context
[Describe the issue, problem, or challenge this ADR addresses. What is the background? Why is a decision needed now? What are the key constraints (e.g., time, resources, existing architecture)?]

### Decision Drivers
- [Driver 1: e.g., Performance requirement > X ms]
- [Driver 2: e.g., Need for rapid development (MVP deadline)]
- [Driver 3: e.g., Compliance with University Data Policy Y]
- [...]

### Decision
We will use **[Chosen Technology/Approach/Pattern]** to **[Address the core problem/achieve the primary goal]** because **[Primary justification, linking back to drivers]**.

Key implementation aspects include:
- [Specific configuration detail 1]
- [Architectural pattern detail 2]
- [Integration point detail 3]
- [...]

### Alternatives Considered
1.  **[Alternative Option 1]**: [Brief description]
    *   *Pros*: [Advantages]
    *   *Cons*: [Disadvantages]
2.  **[Alternative Option 2]**: [Brief description]
    *   *Pros*: [Advantages]
    *   *Cons*: [Disadvantages]
3.  **[Status Quo / Do Nothing]**: [Describe the current state if no change is made]
    *   *Pros*: [Advantages, e.g., no immediate effort]
    *   *Cons*: [Disadvantages, e.g., problem persists]

### Consequences
-   **Positive**: [What benefits does this decision create? (e.g., Improved performance, faster development, better security)]
-   **Negative**: [What tradeoffs or costs does this introduce? (e.g., Increased complexity, vendor lock-in, learning curve)]
-   **Risks**: [What could go wrong with this decision? (e.g., Technology becomes unsupported, integration issues, unforeseen costs)]
-   **Mitigations**: [How will we address or minimize the identified risks? (e.g., Regular backups, monitoring, fallback plan)]

### Implementation Details
[Provide specific technical details on how this decision will be put into practice.]
-   **Configuration**: [e.g., Specific settings, environment variables]
-   **Code Patterns/Libraries**: [e.g., Use of specific design patterns, required libraries]
-   **Integration Points**: [e.g., How it connects with Component X via API Y]
-   **Infrastructure**: [e.g., Required database changes, new services needed]
-   **Process Changes**: [e.g., New deployment steps, required team training]

### Security Considerations
[How does this decision impact system security?]
-   **Authentication/Authorization**: [e.g., Impact on user login, admin access]
-   **Data Protection**: [e.g., Handling of PII, encryption requirements, data storage implications]
-   **Compliance**: [e.g., Adherence to FIPPA, GDPR, University policies]
-   **Attack Surface**: [e.g., Potential new vulnerabilities introduced or mitigated]
-   **Auditing**: [e.g., Logging requirements for security events]

### Migration Path
[How will we evolve this solution or transition to it?]
-   **Short-term Plan**: [e.g., Steps for initial implementation, feature flags]
-   **Long-term Strategy**: [e.g., Future enhancements, potential replacements]
-   **Backward Compatibility**: [e.g., How will this interact with older systems/data?]
-   **Rollback Plan**: [e.g., Steps to revert the decision if necessary]

### Success Metrics
[How will we know if this decision was successful?]
-   [Metric 1: e.g., Page load time < 500ms for 95th percentile]
-   [Metric 2: e.g., Reduction in admin errors related to X by 20%]
-   [Metric 3: e.g., Successful processing of Y registrations per hour]

### Dependencies
-   **Depends on**: [ADRs or specifications this decision relies on (e.g., ADR-002 Supabase Backend)]
-   **Influences**: [Future decisions or components impacted by this one (e.g., ADR-005 Admin UI)]

### Review Trigger
This decision should be revisited if/when:
-   [Condition 1: e.g., Daily active users exceed 1000]
-   [Condition 2: e.g., Core dependency (e.g., Supabase) changes its pricing model significantly]
-   [Condition 3: e.g., University security policy is updated]

### References
-   Related to Project Specifications ยง[Section Number] ([docs/project_specifications.md](docs/project_specifications.md))
-   [Link to relevant external documentation, standard, or research paper]
-   [Link to related internal document/wiki page]

```mermaid
%% Diagram illustrating the core concept or impact of the decision
graph TD
    A[Decision Core Concept] --> B[Benefit/Impact 1]
    A --> C[Benefit/Impact 2]
    A --> D[Related Component]
    style A fill:#f9f,stroke:#333,stroke-width:2px
```

```mermaid
%% Optional: Diagram showing architectural change or data flow
flowchart LR
    subgraph "System Impact"
        Comp1[Component 1] -- Interaction --> Comp2[Component 2]
        Comp2 -- Interaction --> Comp3[This Decision's Component]
        Comp3 -- Interaction --> Comp4[Component 4]
    end
    style Comp3 fill:#9cf,stroke:#333,stroke-width:2px
```

## Version History
| Version | Date       | Author        | Changes                                            |
|---------|------------|---------------|----------------------------------------------------|
| 1.0     | YYYY-MM-DD | [Author Name] | Initial draft                                      |
| 1.1     | YYYY-MM-DD | [Author Name] | [e.g., Added security considerations based on review] |

================================================================================
FILE: docs/event_info/faq.md
TYPE: documentation
SIZE: 8169 bytes
LAST MODIFIED: 2025-03-30T03:20:49.874331
================================================================================

# Philosothon: Frequently Asked Questions

## General Questions

### What exactly is a Philosothon?
A Philosothon adapts the hackathon format for philosophical inquiry. Instead of programming, teams collaborate on developing philosophical arguments and perspectives within a limited timeframe.

### Do I need to be a philosophy specialist to participate?
Not at all! We welcome students from any program with an interest in philosophy. The event is designed to be accessible to those with varying levels of philosophical background.

### How much time commitment is required?
The event runs from 8:30AM to late evening on Monday, April 7th, and from 10:30AM to 2PM on Tuesday, April 8th. You should be prepared to dedicate most of Monday to the event.

## Team Formation

### How are teams formed?
Teams are created based on the preferences you indicate when signing up. You can request specific teammates, indicate whether you prefer working with people with similar or different interests, and specify if you'd like to mentor or be mentored.

### What if I already know who I want to work with?
You can request specific teammates on the sign-up form. If they also request you, we'll do our best to place you together. However, to maintain the experimental nature of the event, we'll limit pre-formed teams to maximize new connections.

### I'm a first-year student. Will I be at a disadvantage?
Not at all. The team formation process is designed to create balanced teams. First-year students bring fresh perspectives that are valuable to philosophical discussion, and if you prefer, you can be paired with more experienced students who can provide guidance.

## Themes and Voting

### How is the theme selected?
When you sign up, you'll rank the potential themes in order of preference. We'll use a ranked choice voting system to determine the winning theme, which will be announced at the opening of the event.

### What if there's a tie between themes?
If there's a close result between two themes, we might present both themes as options, allowing teams to choose which they prefer to address. We won't use more than two themes to maintain focus.

### How is the workshop topic selected?
Similar to theme selection, you'll rank workshop topics when signing up. We weight these votes based on their relevance to the chosen theme(s), giving priority to workshop topics that will be most useful for participants working on the selected theme.

## Workshops and Participation

### How do the workshops work?
We have two workshops scheduled:
1. **Philosophy of Technology Workshop** (Monday, 12:00-1:00PM): All participants attend this workshop, which includes lunch.
2. **Pascal Quest Workshop** (Monday, 6:00-8:00PM): This is a specialized workshop with limited capacity (7-14 participants). Each team will select one representative to attend.

### Why can only one person per team attend the Pascal Quest Workshop?
The Pascal Quest Workshop works best with a smaller group of 7-14 people. To maintain this ideal range while ensuring all teams benefit, we ask each team to send one representative who can then share insights with their teammates afterward.

### How should teams handle the Pascal Quest Workshop?
While one team member attends the Pascal Quest Workshop, the rest of the team should continue working on the project. After the workshop, teams should schedule time for the representative to share what they learned and discuss how these insights might inform their project.

## Presentations and Judging

### What format should our presentation take?
Each team will give a 10-minute presentation to the panel of judges. You have creative freedom in how you structure this, but it should clearly present your philosophical argument. Your presentation will be accompanied by a written component with more detailed argumentation and references.

### Who are the judges?
The judges will primarily be graduate students in philosophy, with possible participation from faculty members. They are selected for their expertise relevant to the event themes.

### What criteria will be used for judging?
Presentations will be judged on philosophical rigor, creativity, clarity, and how effectively they engage with the chosen theme. The judges will be looking for well-reasoned arguments that demonstrate both philosophical understanding and original thinking.

## Academic Workload and Extensions

### I'm worried about balancing this with my coursework. Any advice?
We understand this concern! The event is designed to be intellectually stimulating but manageable. Many students find that the collaborative nature of the Philosothon format actually helps them develop ideas they can later incorporate into their coursework. That said, we recommend reaching out to your professors in advance if you have assignments due around the event dates.

### Should I ask my professors for extensions on assignments?
This is entirely up to you. If you have assignments due right after the Philosothon weekend and are concerned about completing them, requesting an extension is an option. We recommend doing this well in advanceโideally at least a week before the event.

### How should I approach my professor about an extension?
Be honest, professional, and specific. Explain that you're participating in an educational philosophy event that will enhance your philosophical thinking ability. Focus on how this experience connects to your academic development and the course material. We provide a template email below that you can customize.

### What if my professor denies my extension request?
That's perfectly okay and within their rights. In that case, you'll need to plan ahead to complete your coursework before or during the event. Many students bring laptops and use breaks between Philosothon activities to work on assignments. Remember that the Philosothon runs primarily on Monday with just presentations on Tuesday morning.

### Can I still participate if I can't get extensions?
Absolutely! Most sessions take place on Monday with just the presentations on Tuesday morning. You can use evenings and time before/after the event to work on assignments. The submission deadline is flexibleโwhile it's officially 11:59PM Monday, teams can continue refining their work until their presentation time on Tuesday.

## Template for Extension Request

Below is a template email you can adapt when requesting an extension from your professor:

```
Subject: Request Regarding Assignment Due Date - Philosothon Participation

Dear Professor [Name],

I hope this email finds you well. I'm writing to inform you about an educational opportunity I've been selected to participate in and to request a brief extension on [assignment name] due on [current due date].

I've been invited to participate in the Philosophy of Technology Group's "Philosothon" on April 7-8, which is an intensive collaborative philosophy event at UofT where students work in teams to develop philosophical arguments on technology-related themes. The event includes workshops, structured discussions, and culminates in team presentations judged by philosophy graduate students and faculty.

Participation in this event would significantly enhance my philosophical thinking skills and complements the work we've been doing in [course name], particularly regarding [mention relevant course topics that connect to philosophy of technology]. The skills I'll developโcollaborative philosophical inquiry, presenting complex arguments, and engaging with diverse philosophical perspectivesโwill directly benefit my academic development.

Would it be possible to extend the deadline for [assignment name] from [current date] to [proposed date]? This would allow me to fully engage with both the Philosothon and complete a quality assignment for your course.

I understand if this isn't possible according to course policies. If an extension isn't feasible, I will plan accordingly to ensure I meet all deadlines.

Thank you for considering my request. I'm happy to provide any additional information about the Philosothon or discuss alternative arrangements.

Sincerely, [Your Name] [Student Number]
```

================================================================================
FILE: docs/event_info/general_information.md
TYPE: documentation
SIZE: 3457 bytes
LAST MODIFIED: 2025-03-30T03:20:49.874331
================================================================================

# **Philosothon: Where Philosophy Meets Hackathon Culture**

## **An Experimental Event at the University of Toronto**

The Philosophy of Technology Group at the University of Toronto is hosting a groundbreaking event that brings the collaborative energy of hackathons to the world of philosophical inquiry. The **Philosothon** will take place on **April 7-8, 2025**, bringing together students for an intensive day of collaborative thinking on pressing questions at the intersection of philosophy and technology.

## **What is a Philosothon?**

While traditional hackathons gather programmers to build software in a limited timeframe, the Philosothon adapts this model for philosophical exploration. Small teams of students will work together to develop robust philosophical perspectives on contemporary technological issuesโcombining research, critical thinking, and argumentative rigor in a collaborative environment.

## **Why This Matters**

Philosophy has traditionally been practiced as a solitary pursuitโreading, writing, and thinking in isolation. The Philosothon challenges this norm by creating a space where philosophical ideas can emerge through dialogue and collaboration, mirroring how many other disciplines approach complex problems.

"Philosophy students rarely get structured opportunities for extended collaborative thinking," notes the event organizer. "We're testing whether the hackathon format can bring new energy to philosophical inquiry while building intellectual community."

## **The Format**

Teams will tackle a philosophical theme related to technologyโpossibilities include consciousness and artificial intelligence, digital ethics, or algorithmic governance. After a day of collaborative work, each team will present their philosophical arguments to the group.

The event includes:

* A philosophy of technology workshop with lunch
* A hands-on workshop with Pascal Quest, exploring philosophical questions through technological interaction (with one representative per team)
* Team-based philosophical investigation
* Presentations of developed perspectives

## **Event Details**

**Dates:** April 7-8, 2025  
**Location:** Bahen Atrium, University of Toronto  
**Participants:** 15-30 University of Toronto philosophy students  
**Format:** A collaborative philosophical exploration culminating in team presentations

## **The Bigger Picture**

This trial event represents an educational experiment in how philosophical thinking might be practiced differently. While currently limited to philosophy students, the organizers envision potential future iterations that could bridge philosophy with other disciplines, encouraging technologists, scientists, and artists to incorporate philosophical reflection into their work.

The Philosothon joins a growing movement to reimagine how the humanities are taught and practiced in the 21st century, responding to calls for more collaborative, interdisciplinary, and engaged approaches to traditional fields.

## **For More Information**

This is a closed event for University of Toronto philosophy students, but those interested in learning more about the concept or results can contact:

Logan Rooks
PCU Technology and Society Liaison  
Philosophy of Technology Group  
logan.rooks@mail.utoronto.ca

*Note: This trial event is organized by the Philosophy of Technology Group as an educational experiment and is not an official University of Toronto departmental event.*

================================================================================
FILE: docs/event_info/letter_to_department.md
TYPE: documentation
SIZE: 4899 bytes
LAST MODIFIED: 2025-03-30T03:20:49.874331
================================================================================

# **Philosophy Hackathon ("Philosothon") Trial Event Proposal**

Dear Department of Philosophy,

As the Tech and Society Liaison, I am writing to request your support for a trial "Philosothon" event, designed to test a new format for collaborative philosophical inquiry among University of Toronto students.

## **Executive Summary**

The Philosothon trial will bring together 15-30 philosophy students for an intensive day of collaborative philosophical inquiry focused on technology-related themes, culminating in team presentations. This smaller trial event aims to assess student interest, refine the format, and gather feedback for a potential larger event next academic year. With your modest support of $50 for refreshments, we can launch this experimental initiative that may address the unique challenges philosophy students face in building community.

## **Event Overview**

The Philosothon adapts the hackathon format to philosophical inquiry. Participants will engage in concentrated collaborative thinking to produce well-reasoned arguments on themes at the intersection of philosophy and technology. These might include "Minds and Machines: Consciousness Beyond the Human," "Digital Commons: Rethinking Property in Information Space," or "Algorithmic Governance," among others. The theme will be determined by participant vote and announced at the opening of the event. Teams will produce a 10-minute presentation and accompanying written component.

## **Detailed Schedule**

**Monday, April 7, 2025:**

* 8:30AM-9:00AM: Sign-in and welcome
* 9:00AM-9:30AM: Opening remarks and theme announcement
* 9:30AM-11:30AM: Initial team meetings
* 12:00PM-1:00PM: Philosophy of technology workshop (with lunch provided)
* 6:00PM-8:00PM: Pascal Quest workshop (limited to one representative per team)
* 11:59PM: Submission deadline for presentations and written components

**Tuesday, April 8, 2025:**

* 10:30AM-12:30PM: Team presentations
* 12:30PM-1:30PM: Feedback collection and discussion
* 1:30PM-2:00PM: Closing remarks

## **Organizational Structure**

This trial event will be conducted through the Philosophy of Technology Group (PoTG) rather than the PCU, due to timing constraints and its experimental nature. If successful, we envision transitioning this to a full PCU-sponsored event earlier in the next academic year.

## **Team Formation and Inclusivity**

Teams will be formed through:

* Limited self-selected groups registering together
* Individual registrations matched based on interests and academic year
* Intentional pairing of upper and lower-year students to facilitate mentorship
* Consideration of students' philosophical interests and experience levels

Teams will be announced to participants by the Thursday before the event.

## **Educational Benefits**

This trial event offers several unique educational opportunities:

1. **Collaborative Philosophy**: Creates a structured environment for collaborative philosophical dialogueโa rare opportunity compared to the isolated nature of traditional philosophy coursework.
2. **Applied Philosophical Thinking**: Workshops on technological topics provide opportunities to apply philosophical concepts to concrete examples.
3. **Interdisciplinary Exploration**: Bridges philosophical inquiry with technological questions.
4. **Cross-Level Mentorship**: Teams will include students from various academic years, fostering peer mentorship.
5. **Low-Stakes Creative Expression**: Provides students with an opportunity to develop and present original philosophical arguments in a supportive environment.

## **Assessment and Reporting**

As this is a trial event, assessment is particularly crucial. We will:

* Administer detailed participant feedback surveys
* Document philosophical outputs and presentation quality
* Track attendance and engagement metrics
* Identify specific challenges and opportunities for improvement

We commit to providing the department with a comprehensive post-event report detailing outcomes, learnings, and recommendations for future iterations.

## **Funding Request**

We respectfully request financial support of $50 to cover lunch for participants during the Pascal Quest workshop. This modest investment will help us test the viability of this innovative educational format.

## **Conclusion**

The Philosothon trial represents a small but meaningful step toward fostering collaborative philosophical inquiry while addressing the specific community-building challenges faced by philosophy students. With your support, we can experiment with a new format that has potential to strengthen both student engagement and interdisciplinary philosophical education at the University of Toronto.

Thank you for your consideration. I would welcome the opportunity to discuss this proposal further.

Sincerely,

Logan Rooks 
PCU Tech and Society Liaison
Philosophy of Technology Group President

================================================================================
FILE: docs/event_info/philosothon_landscape.md
TYPE: documentation
SIZE: 69783 bytes
LAST MODIFIED: 2025-03-27T22:05:11.318055
================================================================================

# **Exploring the Landscape of Philosothons and Philosophy Hackathons**

Philosothons and Philosophy Hackathons represent innovative and increasingly popular methods for engaging students in philosophical inquiry. These events aim to cultivate critical thinking, collaborative skills, and effective communication, extending the traditional study of philosophy beyond the classroom. This report provides a comprehensive overview of successful Philosothons and Philosophy Hackathons, examines their structures and potential challenges, and offers organizational insights for those planning to implement such initiatives. By drawing upon existing examples and research, this report serves as a detailed guide for educators and organizers seeking to foster philosophical engagement among students through these dynamic formats.

## **Philosothons: A Deep Dive**

### **Successful Examples and Historical Context**

The concept of the Philosothon has gained significant traction within the philosophy education community, particularly alongside the Philosophy for Children (P4C) movement 1. The first Australasian Philosothon took place at Cranbrook School in Sydney in 2011, marking a pivotal moment in the formalization of this approach in the region 1. Following this, the United Kingdom held its first Philosothon in 2012 at King's College, Taunton, indicating the growing international interest in this model 1.

The groundwork for the Philosothon was laid in 2007 at Hale School in Perth, Western Australia, through the initiative of Matthew Wills, the Head of Philosophy and Ethics, and Leanne Rucks 1. This inaugural event brought together nine local high school teams, each consisting of five students, for an evening dedicated to philosophical investigation 1. The term 'Philosothon' itself was coined during the initial years of this event at Hale School 1. The success of these early Philosothons led to the first national Australasian event in 2011, hosted by the Federation of Australasian Philosophy in Schools Associations (FAPSA) at Cranbrook School 2. This three-day event included speakers, games, and Communities of Inquiry, with twelve schools participating, representing the winning teams from each Australian state's 2010 Philosothon 2. The Australasian Philosothon has since become an annual event, held in a different region across Australasia each year 1.

The movement also found fertile ground in the United Kingdom, with Mark Smith and Julie Arliss from the Philosophy of Religion and Ethics Department at King's College, Taunton, playing a crucial role in its development, in collaboration with Dr Michael Lacewing from Heythrop College and Lizzy Lewis from Sapere 1. Wells Cathedral College secured the first victory at the UK event 1. The promotion of Philosothons at Academy Conferences events by the UK hub at King's College, Taunton, has further facilitated their spread throughout the UK, with over 375 attendees in the 2019-2020 academic year 1.

Recognizing the educational value of Philosothons, the Templeton Religion Trust awarded significant funding to the Philosothon project in Australasia in 2017 and to the Ian Ramsey Centre at Oxford University in 2019 to support the growth and establishment of new Philosothons, particularly in remote schools and those catering to students from low socio-economic backgrounds 1. This financial support underscores the perceived importance of these events in promoting higher-order thinking skills and engagement with philosophy across diverse student populations. Beyond secondary schools, Philosothons are also organized for junior and primary school students, sometimes in collaboration with institutions like art galleries, demonstrating the adaptability of the format to different age groups 1. The COVID-19 pandemic in 2020 necessitated a shift to online formats, with the Australasian Association of Philosophy successfully running the first online Philosothon, involving twenty-one schools from Australia and New Zealand 1. This transition highlights the resilience and continued relevance of the Philosothon model in the face of unforeseen circumstances.

The early adoption and sustained expansion of Philosothons across different regions and educational levels indicate a strong recognition of their value within the educational community. This widespread acceptance suggests that the format effectively addresses the need for engaging and challenging activities that promote philosophical inquiry and critical thinking among students. Furthermore, the ability of the Philosothon model to adapt to an online environment demonstrates its fundamental soundness and potential for continued reach and accessibility, irrespective of geographical or logistical constraints.

### **Typical Structure and Schedule**

A Philosothon is typically structured around a series of philosophical discussions known as Communities of Inquiry (COI) 1. These discussions, often four in number, form the core activity of the event. They are usually facilitated by individuals with a background in philosophy or education, such as teachers, university philosophy students, or those holding a PhD 1. The event often takes place on a specific evening each year, bringing together students, teachers, and parents in a focused environment dedicated to philosophical exploration 1. However, variations in this schedule exist, as exemplified by the inaugural Australasian Philosothon in 2011, which was a more extensive three-day event featuring speakers, philosophical games, and multiple COI sessions 2.

The London Philosothon, which specifically catered to primary schools, adopted a structure involving philosophical debates within groups divided into inner and outer circles 3. Each circle would take turns addressing a philosophical question and commenting on the other group's discussion, with a philosophy graduate acting as the facilitator to guide the inquiry 3. This event comprised several parallel sessions held over a few hours, including breaks for lunch, and concluded with an awards ceremony 3.

In the context of the Australasian Philosothon, each COI group typically consists of eight students 5. Each of these inquiry sessions usually runs for a duration of 40 minutes, providing ample time for students to delve into the chosen philosophical questions 6. The structure emphasizes active participation and the collaborative exploration of ideas.

The central role of the Community of Inquiry model in Philosothons highlights the emphasis on the process of philosophical discussion as a means of learning and skill development. Unlike events that might focus on delivering a specific output or solution, Philosothons prioritize the engagement in philosophical dialogue and the cultivation of thinking skills through this interactive format. The flexibility observed in the schedule, ranging from single-evening events to multi-day programs, indicates that organizers can adapt the duration and complexity of the Philosothon to suit their specific resources, the age group of the participants, and the overarching goals of the event.

### **Deliverables**

The traditional Philosothon does not typically emphasize tangible "deliverables" in the same way as a hackathon or project-based competition 1. Instead, the primary focus is on the active participation of students in the philosophical discussions and the quality of their engagement within the Communities of Inquiry 1. The London Philosothon, for instance, considered participation as the main deliverable, although individual students could also receive recognition for specific contributions to the discussions, such as the intelligent use of counter-examples or the introduction of thought experiments 3.

However, in the lead-up to the Australasian Philosothon, students from participating schools are expected to engage in a preparatory phase where they study the provided topic questions and generate their own open-ended questions related to these topics 5. This process of question formulation can be seen as a form of preparatory deliverable, ensuring that students come to the event with a foundation of thought and inquiry related to the discussion themes.

The emphasis on participation and the process of philosophical inquiry, rather than on a final product or presentation, distinguishes Philosothons from other competitive academic events like hackathons. This focus underscores the value placed on developing students' thinking and communication skills in real-time through dynamic and collaborative discussions.

### **Time Allocation**

The amount of time allocated for different components of a Philosothon can vary depending on the specific event. However, a common pattern involves individual discussion rounds within the Communities of Inquiry lasting for a focused period. For example, it is suggested that the discussion of each topic in a Philosothon should typically run for 15 to 20 minutes, with appropriate breaks interspersed between sessions 7. In the Australasian Philosothon, each COI session is scheduled for a duration of 40 minutes, allowing for a more in-depth exploration of the philosophical questions 6. The London Philosothon, designed for primary school students, featured several parallel sessions that took place over a few hours, indicating a more condensed format suitable for younger participants 3. In contrast, a hackathon like the Marietta College PioSolve allocates a continuous block of six hours (from 9:00 am to 3:00 pm) for teams to work on developing their solutions 8.

The relatively short duration of individual discussion rounds in a Philosothon encourages students to make focused and concise contributions to the conversation. This time constraint likely aims to maintain engagement and ensure that all participants have an opportunity to share their perspectives without the discussions becoming protracted or losing focus. The overall length of the Philosothon event itself can range from a few hours, as seen in the London Philosothon, to a full day or even longer, depending on the number of discussion rounds and any additional activities included in the program.

### **Group Formation**

The way in which participants are organized into groups for a Philosothon is often carefully considered to maximize interaction and the diversity of perspectives within each Community of Inquiry. At the first Philosothon held at Hale School, teams consisted of five students from each participating school 1. The structure of the Australasian Philosothon involves each school sending a team of five students, typically one from each of Years 8 to 11, along with a reserve student from one of these year levels 5. During the event, mixed-year-level groups are often utilized for some of the discussion rounds, fostering interaction between students with varying levels of experience and philosophical understanding 5.

A key element of group formation in the Australasian Philosothon is that each COI group includes one student from each of the participating schools 6. This deliberate mixing of students from different educational institutions is intended to broaden the range of perspectives brought to the discussions and encourage collaboration among individuals who may not have previously interacted. Generally, discussion groups in a Philosothon tend to have around 7 to 8 students, a size that is considered conducive to meaningful dialogue and ensures that each participant has an opportunity to contribute 7.

The practice of deliberately mixing students from different schools and sometimes different age levels in Philosothon groups serves to cultivate a richer and more varied intellectual environment. This approach encourages participants to engage with a wider array of viewpoints and to develop their ability to collaborate and communicate effectively with individuals from diverse backgrounds and experiences.

### **Workshops and Preparation**

Preparation plays a crucial role in enabling students to participate effectively in a Philosothon. The underlying rationale for the event is supported by empirical evidence indicating that teaching reasoning skills early in life significantly enhances other cognitive and academic abilities, thereby improving learning in general 1. To facilitate meaningful engagement, students are typically provided with the philosophical questions and some stimulus reading materials in advance of the Philosothon 1. In the case of the Australasian Philosothon, participating schools receive a comprehensive resource pack containing the topic questions to be discussed as early as three months before the event 5. This generous lead time allows students to study the materials, schools to select their contestants, practice discussing the questions, and for students to formulate their own open-ended questions on the topics 5.

For students who may be new to the Community of Inquiry process, preparatory coaching is often essential to ensure they understand what is expected of them during the discussions 7. The Cambridge Philosothon is explicitly described as a workshop format, suggesting a strong emphasis on learning and skill development alongside the competitive aspect 11. Additionally, organizations like Philosophy Matters offer student workshops that cover a range of philosophical themes and contemporary issues, which can serve as valuable preparation for a Philosothon 12. Furthermore, to ensure the smooth operation of Philosothons, training is often organized for PhD students to equip them with the necessary skills to act as facilitators for the Communities of Inquiry 13.

The provision of pre-event materials and the potential inclusion of workshops underscore the importance of equipping students with the foundational knowledge and skills required to participate meaningfully in a Philosothon. This preparation ensures that students can approach the philosophical discussions with confidence and engage in a more thoughtful and rigorous manner.

### **Judging Process and Judges**

The judging process in a Philosothon is a critical component that aims to evaluate the quality of students' philosophical thinking and their engagement in the collaborative inquiry. Students participating in a Philosothon are typically assessed by university-based professional philosophers during the Community of Inquiry discussions 1. These judges award scores based on the rigor and clarity of the students' thought as demonstrated during the discussions 1. Often, philosophy lecturers from local universities volunteer their time and expertise to serve as judges for these events 1.

In the London Philosothon, the judging criteria extended beyond mere philosophical brilliance to also consider the students' ability to collaborate and support their peers within the discussion groups 3. Judges were instructed to look for examples of facilitation and support, which were considered to warrant good marks alongside insightful philosophical contributions 3. Furthermore, individual students in the London Philosothon could also be recognized with medals for specific philosophical skills demonstrated, such as the intelligent use of counter-examples or the effective deployment of thought experiments 3.

For the Australasian Philosothon, judges utilize a detailed rubric to score students' contributions across three key categories: critical thinking, creative thinking, and collaborative thinking 4. This rubric provides a structured framework for evaluating various aspects of a student's participation, including their ability to grasp philosophical problems, construct arguments, evaluate others' arguments, contribute original ideas, make connections between ideas, and engage respectfully with their peers 4. Behaviors such as grandstanding, dominating the discussion, and exhibiting poor listening skills are typically marked down, while actions like facilitating the discussion, questioning assumptions, drawing others into the dialogue, and linking or developing ideas are viewed favorably and contribute to higher scores 14.

The involvement of university-level philosophers as judges brings a level of expertise and credibility to the Philosothon, ensuring that the evaluation of students' philosophical engagement is grounded in recognized academic standards. The judging criteria, which emphasize not only individual philosophical acumen but also collaborative and communicative abilities, reflect the core principles of the Community of Inquiry model and the importance of a cooperative approach to philosophical exploration.

### **Organizational Information**

Philosothons are organized annually in various regions, including all Australian states, New Zealand, and the United Kingdom, indicating a well-established and recurring event structure 1. Often, regional Philosothons are held, with the winning school teams progressing to national-level events such as the Australasian Philosothon 1. King's College, Taunton, serves as a significant hub for Philosothon activities in the UK, facilitating the spread and organization of these events 1. In some instances, primary school Philosothons are organized in collaboration with institutions like art galleries, suggesting a creative approach to engaging younger students with philosophical inquiry in diverse settings 1.

The Australasian Association of Philosophy demonstrated the adaptability of the format by running the first online Philosothon in 2020, responding to the challenges posed by the COVID-19 pandemic 1. Participating schools in the Australasian Philosothon receive a resource pack containing essential information and materials for the event 5. A typical organizational structure involves each discussion group having both a facilitator to guide the conversation and a judge to assess the students' engagement 6. Invitations to participate in the prestigious Australasian Philosothon are typically extended to the schools that achieve success in the various regional Philosothons, creating a tiered system of competition and recognition 6.

The tiered structure of Philosothons, from regional to national levels, provides a clear pathway for schools and students to participate and potentially achieve recognition for their philosophical skills. Collaborations with diverse institutions, such as art galleries, indicate a willingness to explore innovative and engaging environments for philosophical inquiry. The successful transition to an online format highlights the flexibility and resilience of the Philosothon model, ensuring its continued accessibility.

### **Potential Challenges in Running Philosothons**

Despite the success and positive impact of Philosothons, organizers may encounter several potential challenges. Criticisms of the competitive format often arise, focusing on procedural issues and the argument that the competitive spirit might inherently undermine the collaborative nature of philosophical inquiry 2. One procedural concern relates to speaker turn-taking during the Community of Inquiry, which can sometimes appear arbitrary compared to the structured turns in a formal debate 4. Additionally, the non-directive role of the facilitator, while intended to empower students, can sometimes lead to discussions that become unfocused or mired in confusion, particularly if the participants have limited philosophical experience 4.

Another significant challenge lies in maintaining objectivity in the scoring process. Judges are tasked with evaluating the complex and dynamic interactions of a group of students using a rubric, which can be demanding and potentially subjective 4. The interpretation of the rubric itself can also vary among judges, leading to inconsistencies in scoring, a common issue in educational assessments 4. Some argue that the very act of ranking individuals in a philosophical event can compromise the development of a genuine Community of Inquiry, where the focus should ideally be on shared understanding rather than individual achievement 2.

Balancing the competitive element with the primary aim of fostering a sense of community and cooperation is a delicate task for Philosothon organizers 6. Ensuring that students approach the event as a discussion rather than a debate requires specific coaching and a clear emphasis on the principles of collaborative philosophical inquiry 7. Facilitators need to be experienced in guiding these types of discussions effectively, intervening when necessary to keep the inquiry on track and ensure that all students have a fair opportunity to participate, without imposing their own views 7.

The inherent tension between competition and the collaborative ideals of philosophical inquiry necessitates careful design and facilitation to ensure that the competitive aspect enhances, rather than detracts from, the learning experience. The subjective nature of assessing philosophical discussions requires clear, well-defined rubrics and adequate training for judges to promote consistency and fairness in evaluations.

## **Philosophy Hackathons: Exploring the Format**

### **Successful Examples and Conceptual Models**

While the term "Philosophy Hackathon" might not be as widely established as "Philosothon," the hackathon format, known for its intensive, collaborative problem-solving approach, can be effectively adapted to philosophical themes. The provided snippets primarily detail general hackathons focused on software, technology, and business innovation 8. However, some examples suggest the potential for philosophy-focused hackathons.

One instance is the "Prompt Engineering Hackathon for Humanities" at Arizona State University (ASU) 59. This event challenged participants to explore the advantages and disadvantages of using AI as a collaborator from a humanities perspective, with the creation of a persona playbook as the main deliverable 59. This example demonstrates how the hackathon format can be used to engage with philosophical questions related to technology and human-computer interaction.

Another compelling model is the idea of transforming Hermann Hesse's "Glass Bead Game" into an AI hackathon 60. The Glass Bead Game, in its original conception, is an intellectual game that synthesizes knowledge across various disciplines such as mathematics, art, science, philosophy, and music 60. An AI hackathon based on this concept could involve participants developing digital platforms or AI tools that facilitate the creative connection and synthesis of concepts across these diverse fields 60. Potential deliverables could include AI-powered "concept cards" or digital "beads" that dynamically interact to form narrative sequences or visualize conceptual connections between seemingly unrelated ideas 60.

Beyond these examples, a Philosophy Hackathon could also focus on developing AI tools for ethical analysis, creating digital resources for philosophical research, or exploring the philosophical implications of emerging technologies. The core idea is to leverage the collaborative and intensive nature of a hackathon to tackle philosophical problems or explore philosophical concepts through innovative and often technology-driven approaches.

The integration of philosophical inquiry with the dynamic format of a hackathon presents a unique opportunity to attract students with a broad range of skills and interests, bridging the gap between humanities and technology. The "Glass Bead Game" concept, in particular, offers a rich framework for a Philosophy Hackathon that emphasizes interdisciplinary thinking and creative synthesis, aligning with the expansive nature of philosophical exploration.

### **Typical Structure and Schedule**

The structure and schedule of a Philosophy Hackathon would likely mirror those of general hackathons, with necessary adaptations to suit the philosophical focus. Typically, hackathons are time-bound competitive events where participants collaborate in teams to build proofs of concept or minimum viable products (MVPs) around a specific problem or to innovate within a given theme 23. These events can range in duration from an intense 24 to 48 hours to more extended periods, such as a few days or even weeks for virtual hackathons 18.

A common structure involves an initial phase of registration and team formation, often followed by an ideation stage where participants brainstorm and refine their project ideas 22. The core of the hackathon is the development phase, where teams work intensively to create their deliverables. The event typically culminates in presentations or pitches to a panel of judges, followed by an awards ceremony 22.

The Marietta College PioSolve hackathon provides an example of a condensed, one-day schedule 8. The program included an introduction, a statement of the problem and rules, team selection, a six-hour block for teams to develop solutions, time for uploading presentation slides, and finally, team pitches to the judges 8. In contrast, the ASU Prompt Engineering Hackathon was held over two days, with the first day focusing on welcome, introductions to materials, prompt exercises, teaming, and an introduction to the challenge, followed by dedicated work time on the second day, culminating in a pitch competition, judging, and awards 59. Virtual hackathons, like the one organized by Consensys, can have much longer durations, running over three months entirely online to provide greater flexibility for participants worldwide 18.

Adapting this framework for a Philosophy Hackathon would involve setting a clear philosophical challenge or theme, allowing time for participants to research and discuss philosophical concepts, and providing a structured schedule for the development of their chosen deliverables, whether they be arguments, frameworks, or digital tools. The choice between an in-person and a virtual format would also influence the schedule and the types of interactions possible.

The time-bound nature of the hackathon format encourages participants in a Philosophy Hackathon to focus their efforts and rapidly develop their philosophical ideas and projects. The flexibility in scheduling allows organizers to tailor the event to the specific scope of the philosophical challenge and the desired level of engagement.

### **Deliverables**

The deliverables for a Philosophy Hackathon would need to be carefully defined to align with the event's philosophical goals and the chosen format. In general hackathons, common deliverables include proofs of concept, minimum viable products (MVPs), software prototypes, presentations, and slide decks 22. For a Philosophy Hackathon, these could be adapted to include well-reasoned philosophical arguments on a specific topic, ethical frameworks for addressing a particular issue, proposals for applying philosophical principles to a real-world problem, or even digital tools that embody or explore philosophical concepts 60.

The Prompt Engineering Hackathon at ASU, for example, required participants to create a "persona playbook" that expressed their discoveries about the capabilities and limitations of AI as a collaborator from a humanities perspective 59. This deliverable focused on articulating insights and boundaries in the context of human-machine synergy. The "Glass Bead Game" hackathon concept suggests deliverables such as AI-powered "concept cards" or digital platforms that visually map conceptual connections across different fields, emphasizing interdisciplinary synthesis 60. Policy hackathons often require participants to produce a concise policy brief and a pitch presentation outlining their proposed solutions 27.

When designing a Philosophy Hackathon, it is crucial to define clear and achievable deliverables that encourage participants to engage deeply with philosophical concepts and apply their understanding in a creative and meaningful way. Providing examples or templates for the expected deliverables can help to guide participants and ensure that the final outputs are aligned with the event's objectives. The nature of the deliverables can vary widely, allowing organizers to tailor the hackathon to specific areas of philosophy or interdisciplinary themes, depending on the desired learning outcomes and the skills of the anticipated participants.

### **Time Allocation**

The time allocated for a Philosophy Hackathon, similar to other hackathons, typically falls within a range of 24 to 48 hours for the main development period 20. However, the duration can be adjusted based on the complexity of the philosophical challenge and the expected deliverables. Some hackathons may be shorter, such as the one-day format of the Marietta College PioSolve event 8, while others, particularly virtual ones, can extend over several weeks or even months, like the three-month Consensys virtual hackathon 18. The ASU Prompt Engineering Hackathon provided dedicated work time for participants on both the Friday evening and the Saturday of the event 59. The MIT policy hackathon gave teams a focused 24-hour period to brainstorm, analyze, and develop their solutions, culminating in a policy brief and a pitch presentation 27.

When planning a Philosophy Hackathon, organizers should carefully consider the scope of the philosophical problem and the type of deliverables expected from the participants. For challenges that require in-depth research, complex argumentation, or the development of digital tools, a longer timeframe might be necessary. Conversely, for more focused exercises or ideation challenges, a shorter duration might suffice. It is also important to factor in time for initial introductions, team formation, workshops (if included), presentations, and judging when determining the overall schedule of the event. The time constraints inherent in the hackathon format are intended to encourage efficient work habits and the ability to produce meaningful output under pressure, fostering a dynamic and engaging environment for philosophical exploration.

### **Group Formation**

Collaboration is a central element of the hackathon experience, and Philosophy Hackathons would typically involve participants working together in teams 23. Teams are often formed at the beginning of the event, sometimes through self-selection based on shared interests or around pre-existing project ideas 8. In some cases, hackathons include pitching sessions where individuals can present their ideas and recruit team members who are interested in contributing to those projects 28.

For a Philosophy Hackathon, it is often beneficial to encourage the formation of teams with diverse skill sets 28. This could mean bringing together students with strengths in logical argumentation, critical thinking, philosophical writing, and potentially technology or design, depending on the nature of the hackathon's theme and the expected deliverables. For instance, a hackathon focused on developing a digital tool for ethical decision-making would benefit from having team members with both philosophical and technical expertise.

Organizers can facilitate effective team formation by providing opportunities for participants to network and connect with others who have complementary skills or shared interests. This could involve icebreaker activities, designated time for team formation, or a platform where participants can indicate their skills and project interests. Allowing individuals to join pre-formed teams or to propose their own project ideas and recruit team members can also be effective strategies. For a Philosophy Hackathon, teams that bring together a variety of academic backgrounds and perspectives are likely to foster a richer exploration of the philosophical problems and lead to more innovative and well-rounded outcomes.

### **Workshops and Training**

Incorporating workshops and training sessions into a Philosophy Hackathon can significantly enhance the participants' learning experience and the quality of their deliverables 19. These sessions can provide participants with valuable knowledge and skills relevant to the hackathon's theme and challenges. For a Philosophy Hackathon, relevant workshop topics could include logical argumentation and reasoning, ethical frameworks and analysis, philosophical writing and communication, and the use of digital tools for philosophical research or presentation. If the hackathon has a specific focus, such as the intersection of philosophy and artificial intelligence, workshops on topics like AI ethics or prompt engineering would be highly beneficial, as seen in the ASU Prompt Engineering Hackathon which included an "Intro to materials" and "Prompt exercises" 59.

The timing of these workshops can vary; some might be offered at the beginning of the hackathon to provide foundational knowledge, while others could be scheduled throughout the event to address specific needs or challenges that arise during the development process. Mentors with expertise in relevant areas can also play a crucial role in providing guidance and support to the teams as they work on their projects 22. By offering targeted workshops and making mentors available, organizers can ensure that participants in a Philosophy Hackathon have the resources and support they need to engage effectively with the philosophical challenges and produce high-quality outcomes.

### **Judging Process and Judges**

The judging process for a Philosophy Hackathon should be carefully designed to evaluate the philosophical merit and quality of the participants' work. While general hackathon judging criteria often include creativity, technical execution, functionality, problem-solving, impact, and the final pitch 30, a Philosophy Hackathon would place a greater emphasis on the logical rigor of arguments, the clarity of philosophical concepts, the originality of ideas, and the depth of analysis. If the hackathon involves a technological component, criteria related to the effective use of technology and user experience would also be relevant, as suggested by the "Glass Bead Game" hackathon concept which includes user experience in its evaluation criteria 60.

The selection of judges is crucial for ensuring a fair and informed evaluation process. For a Philosophy Hackathon, the judging panel should ideally include individuals with expertise in philosophy, such as philosophy professors, ethicists, and researchers in relevant fields. If the hackathon has an interdisciplinary focus, such as the ethics of artificial intelligence, it would be beneficial to include judges with expertise in both philosophy and the related field (e.g., AI developers, computer scientists). Clear and well-defined judging criteria should be communicated to the participants in advance, outlining the key aspects on which their projects will be evaluated. This transparency helps participants to focus their efforts and understand what constitutes a successful outcome in the context of the Philosophy Hackathon.

### **Organizational Information**

Organizing a successful Philosophy Hackathon requires careful planning and attention to various logistical and programmatic details. Similar to organizing any hackathon, this involves defining the specific goals and theme of the event, recruiting participants and mentors, establishing clear rules and guidelines, and determining the judging criteria 22. For a Philosophy Hackathon, the core focus will be on identifying a compelling philosophical problem or theme that will engage participants and inspire innovative approaches. This might involve framing a broad ethical challenge, exploring the philosophical implications of a new technology, or asking participants to develop a philosophical framework for a particular domain.

Recruiting participants for a Philosophy Hackathon might involve targeting students in philosophy programs, humanities departments, and interdisciplinary programs that combine philosophy with other fields like computer science or cognitive science. Utilizing online platforms and social media can be effective ways to reach a wider audience 28. Organizers should also consider recruiting mentors with expertise in philosophy and any related fields relevant to the hackathon's theme.

Choosing the appropriate format for the hackathon, whether in-person, virtual, or hybrid, will influence the organizational requirements. For virtual events, selecting a suitable online platform that supports team collaboration, communication, and project submission is essential 61. Regardless of the format, providing clear and timely communication to participants about the hackathon's goals, schedule, rules, and deliverables is crucial for ensuring a focused and productive event.

### **Potential Challenges in Running Philosophy Hackathons**

Organizing a Philosophy Hackathon presents several unique challenges that organizers should be prepared to address. One significant challenge is defining "deliverables" that are both philosophically meaningful and achievable within the typically short timeframe of a hackathon 20. Unlike software or hardware hackathons where the outputs are often tangible products or prototypes, the deliverables for a Philosophy Hackathon might be more abstract, such as well-reasoned arguments or ethical frameworks. Clearly articulating what constitutes a successful philosophical deliverable and providing guidance or examples can help participants to focus their efforts.

Another challenge lies in the judging process. Evaluating the quality and rigor of philosophical work can be more subjective than assessing the functionality of a piece of software. Therefore, it is crucial to have a panel of judges with strong expertise in philosophy and to establish clear judging criteria that emphasize the key aspects of philosophical inquiry, such as logical coherence, conceptual clarity, and originality.

Attracting participants with the right mix of skills can also be a challenge, especially if the Philosophy Hackathon involves a technological component. Organizers might need to target a diverse group of students and individuals from both humanities and technical backgrounds and encourage interdisciplinary collaboration. Ensuring that the focus of the hackathon remains on deep philosophical engagement, rather than becoming a superficial exercise in applying technology to philosophical themes, is another important consideration. Interdisciplinary hackathons, in general, can face challenges related to the limited exchange of best practices and research findings between different fields 40. Organizers of Philosophy Hackathons should be mindful of these potential challenges and proactively develop strategies to mitigate them through careful planning, clear communication, and thoughtful design of the event.

## **Student Feedback and Insights**

### **Feedback on Philosothons**

While direct online feedback from students who have participated in Philosothons might be somewhat limited, existing accounts and related research offer valuable insights into their experiences. Feedback from a population health hackathon, which utilized a design thinking curriculum similar to the inquiry-based approach in Philosothons, highlighted the significant value students placed on the interdisciplinary nature of the event and the diverse expertise within their groups 35. This suggests that the collaborative aspect of Philosothons, where students from different schools and backgrounds come together, is a highly valued component of the experience.

The description of the London Philosothon, though not direct student quotes, indicates that the children involved were deeply committed to the discussions, exhibited courtesy towards their peers, and found the overall experience to be "cool" and "impressive" 3. The fact that an 11-year-old student made insightful philosophical remarks during the event further suggests a high level of engagement and intellectual stimulation 3. Post-event surveys conducted by Philosothon organizers have focused on both procedural aspects of the event and the intrinsic value derived by the participants 4.

However, some feedback from Philosothon participants has noted a potential tension between the competitive element of the event and the core goals of the Community of Inquiry method, which emphasizes collaboration and shared understanding 66. This highlights the importance for organizers to carefully frame the Philosothon to ensure that the competitive aspect does not overshadow the primary aim of fostering genuine philosophical inquiry and mutual learning among the students. Overall, the available feedback suggests that students generally have positive experiences in Philosothons, appreciating the collaborative environment and the opportunity to engage in meaningful philosophical discussions.

### **Transferable Insights from General Hackathon Feedback**

Feedback from general hackathons can also provide transferable insights that could be valuable for improving the format of Philosophy Hackathons. Students often report that they value the opportunity to learn new skills, apply their existing knowledge to solve real-world problems, and network with peers and industry professionals during hackathons 32. The hackathon environment can also serve as a "fail-forward" space where students feel supported in taking risks and learning from their mistakes 36. Participants tend to appreciate clear project scopes, well-defined deadlines, and opportunities to receive constructive feedback on their work 29.

However, feedback also highlights potential challenges, such as difficulties in team dynamics, technical issues encountered during development, and concerns about the relevance or impact of the hackathon projects in a real-world context 20. Inclusivity is another important factor, with participants valuing hackathons that cater to various experience levels and create a welcoming environment for individuals from diverse backgrounds 19. Organizers of Philosophy Hackathons can draw upon these insights by ensuring that the philosophical challenges are clearly defined, that there are ample opportunities for collaboration and learning, and that participants receive support and feedback throughout the event. Addressing potential pitfalls, such as ensuring inclusivity and providing adequate technical or philosophical guidance, can contribute to a more positive and enriching experience for all participants.

## **Organizational Information and Resources for Planning**

### **Defining the Philosophical Problem or Discussion Topics**

Carefully selecting engaging and thought-provoking philosophical questions or problem statements is fundamental to the success of both Philosothons and Philosophy Hackathons. Philosothon questions are typically open-ended, exploring fundamental philosophical concepts across various branches of philosophy, such as ethics, metaphysics, epistemology, and political philosophy 1. Examples include questions like "Is it moral to fake kindness?", "Do you have free will?", "What is the nature of the human mind?", and "What is it to live a good life?" 1. Effective philosophical questions should be genuine, not easily dismissed, and should have compelling reasons supporting multiple perspectives 69. Resources like online forums and philosophical discussions can provide inspiration for potential questions 67.

For Philosophy Hackathons, the problem statement should be a concise description of an issue, clearly indicating the current state, the desired outcome, and the gap that needs to be addressed 45. Themes can provide a creative and focused direction for hackathon projects 19. For example, a theme could be "The Ethics of Artificial Intelligence" or "Philosophy and the Digital Age," under which participants could develop specific projects addressing related philosophical problems. When defining the problem statement or theme, it is helpful to consider the desired learning outcomes and the skills of the intended participants 45. Narrowing down the problem through techniques like asking a series of "why" and "how" questions can help to identify the underlying issues and craft a more effective prompt 45.

### **Recruiting Participants and Judges**

Recruitment strategies for Philosothons typically involve reaching out to schools and philosophy teachers, highlighting the educational benefits of participation, such as the development of critical thinking and communication skills 1. Regional Philosothons can serve as entry points, with winning teams advancing to national events 6. Judges are often sought from philosophy departments at universities or other institutions with expertise in philosophical inquiry 1.

For Philosophy Hackathons, recruitment efforts should target students and individuals with an interest in both philosophy and the specific theme of the hackathon (e.g., AI ethics, digital humanities). This might involve reaching out to relevant academic departments, student organizations, and online communities 28. Leveraging social media and hackathon platforms can also be effective 61. Judges for Philosophy Hackathons should include philosophers, ethicists, and potentially experts in the relevant interdisciplinary fields to ensure a comprehensive evaluation of the projects 30. Clearly communicating the goals and theme of the hackathon is crucial for attracting the right participants 72.

### **Rules and Guidelines**

Establishing clear rules and guidelines is essential for creating a positive and productive environment in both Philosothons and Philosophy Hackathons. For Philosothons, the rules should emphasize the collaborative nature of philosophical inquiry, encouraging students to listen respectfully, build upon each other's ideas, and ask clarifying questions 6. Grandstanding and interrupting should be discouraged 14. The judging criteria should align with these principles, focusing on the quality of thought, respectful engagement, and collaborative contributions 4. Resources like guidelines for facilitating Communities of Inquiry can be valuable for both participants and facilitators 7.

For Philosophy Hackathons, the rules should clearly define the scope of the projects, the expected deliverables, and the judging criteria 22. Guidelines for team collaboration, intellectual property (if applicable), and submission formats should also be provided. Maintaining a welcoming and inclusive environment should be a priority, with policies in place to address any form of harassment or disrespectful behavior 23. General guidelines for respectful discussion in academic settings can also be adapted for hackathons 75.

### **Cost Considerations**

The cost of organizing a Philosothon or Philosophy Hackathon can vary significantly depending on the scale, format, and resources required. Some Philosothons charge a small participation fee per student to cover costs such as food 76. However, grants and subsidies are often available to support schools, particularly those in regional or low socio-economic areas, to cover costs associated with training, setting up Philosothons, or travel 1. In some cases, organizations or schools may cover all costs internally 79.

For Philosophy Hackathons, potential costs can include venue rental (if in-person), food and refreshments, prizes to incentivize participation, marketing and outreach efforts, and platform fees if using online hackathon platforms 23. Securing sponsorship from relevant organizations or institutions can be a crucial way to offset these costs 25. When planning a Philosophy Hackathon, organizers should develop a detailed budget that accounts for all anticipated expenses and explore potential funding sources to ensure the financial sustainability of the event.

## **Conclusion**

Philosothons and Philosophy Hackathons offer distinct yet valuable approaches to fostering philosophical inquiry, critical thinking, and collaboration among students. Philosothons, with their emphasis on structured philosophical discussions within Communities of Inquiry, provide a platform for developing nuanced thinking and communication skills through dialogue. Philosophy Hackathons, on the other hand, leverage the intensive, project-based format to encourage creative problem-solving and the application of philosophical concepts to real-world challenges, often incorporating technology.

Both formats present unique organizational considerations and potential challenges. For Philosothons, balancing competition with collaboration and ensuring fair and objective judging are key. For Philosophy Hackathons, clearly defining philosophical deliverables and attracting participants with diverse skill sets are important factors for success. Student feedback indicates that the collaborative and interdisciplinary aspects of these events are highly valued, contributing to positive learning experiences.

Educators and organizers interested in implementing Philosothons or Philosophy Hackathons should focus on careful planning, clear communication of goals and guidelines, and a commitment to creating an enriching and supportive environment for all participants. By drawing upon the examples, insights, and resources outlined in this report, organizers can effectively design and execute these innovative events, fostering a deeper engagement with philosophy and developing essential skills for students' academic and personal growth.

**Table 1: Key Differences Between Philosothons and Philosophy Hackathons**

| Feature | Philosothon | Philosophy Hackathon |
| :---- | :---- | :---- |
| **Core Activity** | Philosophical Discussion (Community of Inquiry) | Project Development (Argument, Framework, Tool) |
| **Deliverables** | Participation in Discussion | Tangible Output (Argument, Framework, Tool, Presentation) |
| **Timeframe** | Hours to a Day | 24-48 Hours (or longer) |
| **Judging Focus** | Quality of Thought & Collaboration | Logical Rigor, Originality & Impact |
| **Typical Participants** | School Students | Students & Individuals with Interdisciplinary Interests |

**Table 2: Potential Challenges and Mitigation Strategies**

| Challenge | Event Type | Mitigation Strategy |
| :---- | :---- | :---- |
| Competition vs. Collaboration | Philosothon | Emphasize collaboration in judging criteria and guidelines; Frame the event as a "friendly competition". |
| Subjectivity in Judging | Philosothon | Develop clear and detailed rubrics; Provide training and discussion for judges. |
| Defining Philosophical Deliverables | Philosophy Hackathon | Provide clear examples and templates for deliverables; Offer workshops on philosophical writing and argumentation. |
| Attracting Interdisciplinary Participants | Philosophy Hackathon | Target diverse academic departments and student groups; Highlight the interdisciplinary nature of the challenges. |
| Maintaining Focus on Philosophical Engagement | Philosophy Hackathon | Design challenges that require deep philosophical thinking; Ensure judges have strong philosophical backgrounds. |

#### **Works cited**

1. Philosothon \- Wikipedia, accessed March 27, 2025, [https://en.wikipedia.org/wiki/Philosothon](https://en.wikipedia.org/wiki/Philosothon)  
2. Australie : Fostering the exploration of philosophical and ethical questions among school students in Australasia \- Diotime, accessed March 27, 2025, [https://diotime.lafabriquephilosophique.be/numeros/059/016/print/](https://diotime.lafabriquephilosophique.be/numeros/059/016/print/)  
3. A Marathon for the Mind \- The Philosophers' Magazine \-, accessed March 27, 2025, [https://philosophersmag.com/a-marathon-for-the-mind/](https://philosophersmag.com/a-marathon-for-the-mind/)  
4. The Philosothon: Philosophy as performance \- ResearchGate, accessed March 27, 2025, [https://www.researchgate.net/publication/371894440\_The\_Philosothon\_Philosophy\_as\_performance/download](https://www.researchgate.net/publication/371894440_The_Philosothon_Philosophy_as_performance/download)  
5. The Philosothon: Philosophy as performance Simon Kidd University of Western Australia, Perth, Australia \- PhilArchive, accessed March 27, 2025, [https://philarchive.org/archive/KIDTPP](https://philarchive.org/archive/KIDTPP)  
6. About โ What โ Philosothon, accessed March 27, 2025, [https://www.philosothon.org/site/about-what/](https://www.philosothon.org/site/about-what/)  
7. What is a Philosothon? | Meemu Teacher Resource Centre, accessed March 27, 2025, [https://meemutrc.wordpress.com/what-is-a-philosothon/](https://meemutrc.wordpress.com/what-is-a-philosothon/)  
8. PioSolve Hackathon | Marietta College, accessed March 27, 2025, [https://www.marietta.edu/hackathon](https://www.marietta.edu/hackathon)  
9. Cambridge Philosothon | Faculty of Divinity, accessed March 27, 2025, [https://www.divinity.cam.ac.uk/study-here/open-days/teachers/cambridge-philosothon](https://www.divinity.cam.ac.uk/study-here/open-days/teachers/cambridge-philosothon)  
10. Philosothon UK \- Academy Conferences invite you to participate, accessed March 27, 2025, [https://philosothon.co.uk/](https://philosothon.co.uk/)  
11. The Cambridge Philosothon, accessed March 27, 2025, [https://www.festival.cam.ac.uk/events/cambridge-philosothon](https://www.festival.cam.ac.uk/events/cambridge-philosothon)  
12. Student Workshops \- Philosophy Matters, accessed March 27, 2025, [https://philosophymatters.com.au/student-workshops/](https://philosophymatters.com.au/student-workshops/)  
13. Philosothon Grants now available \- AAHPSSS, accessed March 27, 2025, [https://aahpsss.net.au/philosothon-grants-now-available/](https://aahpsss.net.au/philosothon-grants-now-available/)  
14. The Philosothon Phenomenon | Issue 135 \- Philosophy Now, accessed March 27, 2025, [https://philosophynow.org/issues/135/The\_Philosothon\_Phenomenon](https://philosophynow.org/issues/135/The_Philosothon_Phenomenon)  
15. Philosothon Judging Criteria \- Meemu Teacher Resource Centre, accessed March 27, 2025, [https://meemutrc.wordpress.com/philosothon-judging-criteria/](https://meemutrc.wordpress.com/philosothon-judging-criteria/)  
16. Cooperation and Competition in the Philosothon \- espace \- Curtin's institutional repository, accessed March 27, 2025, [https://espace.curtin.edu.au/handle/20.500.11937/89821](https://espace.curtin.edu.au/handle/20.500.11937/89821)  
17. Cooperation and Competition in the Philosothon Alan Tapper alandtapper@gmail.com Matthew Wills matwills59@hotmail.com Abstract P \- PhilArchive, accessed March 27, 2025, [https://philarchive.org/archive/TAPCAC-2](https://philarchive.org/archive/TAPCAC-2)  
18. 7 Hackathon Examples: Proven Formats, Themes, and Success Stories \- AngelHack, accessed March 27, 2025, [https://angelhack.com/blog/hackathon-examples/](https://angelhack.com/blog/hackathon-examples/)  
19. Top 15 Corporate Hackathon Ideas for Your Company Projects in 2022, accessed March 27, 2025, [https://corporate.hackathon.com/articles/top-15-corporate-hackathon-ideas-in-2022](https://corporate.hackathon.com/articles/top-15-corporate-hackathon-ideas-in-2022)  
20. Have you ever seen hackathons work? : r/ExperiencedDevs \- Reddit, accessed March 27, 2025, [https://www.reddit.com/r/ExperiencedDevs/comments/1axmddz/have\_you\_ever\_seen\_hackathons\_work/](https://www.reddit.com/r/ExperiencedDevs/comments/1axmddz/have_you_ever_seen_hackathons_work/)  
21. My First LLM Hackathon โ Profound \- Having intellectual depth and insight, accessed March 27, 2025, [https://www.profound-deming.com/blog-1/my-first-llm-hackathon](https://www.profound-deming.com/blog-1/my-first-llm-hackathon)  
22. What is the structure of a hackathon? | Pristine Agency, accessed March 27, 2025, [https://pristineagency.eu/blog/structure-of-a-hackathon](https://pristineagency.eu/blog/structure-of-a-hackathon)  
23. The complete guide to organizing a successful hackathon \- HackerEarth, accessed March 27, 2025, [https://www.hackerearth.com/community-hackathons/resources/e-books/guide-to-organize-hackathon/](https://www.hackerearth.com/community-hackathons/resources/e-books/guide-to-organize-hackathon/)  
24. Principles of Management 2.0 \- Hackathon Navigator, accessed March 27, 2025, [https://www.managementexchange.com/m20-principles](https://www.managementexchange.com/m20-principles)  
25. Hackathon 101 \- YouTube, accessed March 27, 2025, [https://www.youtube.com/watch?v=ufguUPJYzBc](https://www.youtube.com/watch?v=ufguUPJYzBc)  
26. Organizing My First Hackathon: A Journey of Discovery and Growth \- Nnisarg Gada, accessed March 27, 2025, [https://nnisarg.in/blog/organising-my-first-hackathon/](https://nnisarg.in/blog/organising-my-first-hackathon/)  
27. My First Policy Hackathon: Lessons from MIT's 7th Annual Event, accessed March 27, 2025, [https://graduate.rice.edu/news/current-news/my-first-policy-hackathon-lessons-mits-7th-annual-event](https://graduate.rice.edu/news/current-news/my-first-policy-hackathon-lessons-mits-7th-annual-event)  
28. Hackathon planning kit, accessed March 27, 2025, [https://hackathon-planning-kit.org/](https://hackathon-planning-kit.org/)  
29. What Product Managers Can Learn From Hackathons | UserVoice Blog, accessed March 27, 2025, [https://www.uservoice.com/blog/learn-from-hackathons](https://www.uservoice.com/blog/learn-from-hackathons)  
30. Hackathon judging: 6 criteria to pick winning projects \- Taikai.network, accessed March 27, 2025, [https://taikai.network/en/blog/hackathon-judging](https://taikai.network/en/blog/hackathon-judging)  
31. How To Judge A Hackathon: 5 Criteria To Pick Winners \- Eventornado, accessed March 27, 2025, [https://eventornado.com/blog/how-to-judge-a-hackathon-5-criteria-to-pick-winners](https://eventornado.com/blog/how-to-judge-a-hackathon-5-criteria-to-pick-winners)  
32. Crafting Effective Hackathon Judging Criteria: A Step-by-Step Guide \- Eventflare, accessed March 27, 2025, [https://eventflare.io/journal/crafting-effective-hackathon-judging-criteria-a-step-by-step-guide](https://eventflare.io/journal/crafting-effective-hackathon-judging-criteria-a-step-by-step-guide)  
33. Organising an internal company hackathon โ MAQER DAYS @ MAQE | by Sky Chew, accessed March 27, 2025, [https://medium.com/@skychew/organising-an-internal-company-hackathon-maqe-2d9ec51d0c6c](https://medium.com/@skychew/organising-an-internal-company-hackathon-maqe-2d9ec51d0c6c)  
34. The Hackathon Circlejerk | arvind.io, accessed March 27, 2025, [https://arvind.io/posts/the-hackathon-circlejerk/](https://arvind.io/posts/the-hackathon-circlejerk/)  
35. Hackathon challenge as a pedagogical tool to teach interdisciplinary problem-solving skills for population health. \- MedEdPublish, accessed March 27, 2025, [https://mededpublish.org/articles/12-72](https://mededpublish.org/articles/12-72)  
36. Hackathons as a New Pedagogy \- Edutopia, accessed March 27, 2025, [https://www.edutopia.org/blog/hackathons-as-a-new-pedagogy-brandon-zoras](https://www.edutopia.org/blog/hackathons-as-a-new-pedagogy-brandon-zoras)  
37. Top 15 Corporate Hackathon Ideas for Your Company Projects in 2022, accessed March 27, 2025, [https://corporate.hackathon.com/articles/top-15-corporate-hackathon-ideas-for-your-company-projects-in-2022](https://corporate.hackathon.com/articles/top-15-corporate-hackathon-ideas-for-your-company-projects-in-2022)  
38. UP Focus Day \- Upgradable.org, accessed March 27, 2025, [https://www.upgradable.org/up-day](https://www.upgradable.org/up-day)  
39. Unpack Interesting Hackathon Types and Formats \- AngelHack, accessed March 27, 2025, [https://angelhack.com/blog/unpack-the-interesting-types-and-formats-in-the-world-of-hackathon/](https://angelhack.com/blog/unpack-the-interesting-types-and-formats-in-the-world-of-hackathon/)  
40. (PDF) The Future of Hackathon Research and Practice \- ResearchGate, accessed March 27, 2025, [https://www.researchgate.net/publication/383800263\_The\_Future\_of\_Hackathon\_Research\_and\_Practice](https://www.researchgate.net/publication/383800263_The_Future_of_Hackathon_Research_and_Practice)  
41. Hackathons as a bridge between academia and industry \- Maciej Rys, 2025, accessed March 27, 2025, [https://journals.sagepub.com/doi/10.1177/09504222251323946](https://journals.sagepub.com/doi/10.1177/09504222251323946)  
42. The problems with Hackathons. A hackathon is an event in which aโฆ | by Obidi Ojochide | Bootcamp, accessed March 27, 2025, [https://medium.com/design-bootcamp/the-problems-with-hackathons-f71d5775c86](https://medium.com/design-bootcamp/the-problems-with-hackathons-f71d5775c86)  
43. Five Reasons Why Hackathons Don't Foster Innovation | BrainStationยฎ, accessed March 27, 2025, [https://brainstation.io/magazine/five-reasons-why-hackathons-dont-foster-innovation](https://brainstation.io/magazine/five-reasons-why-hackathons-dont-foster-innovation)  
44. How to Run an Effective Hackathon for Corporate Innovation | Collective Campus, accessed March 27, 2025, [https://www.collectivecampus.io/blog/how-to-run-an-effective-hackathon-for-corporate-innovation](https://www.collectivecampus.io/blog/how-to-run-an-effective-hackathon-for-corporate-innovation)  
45. How to create effective problem statements for idea challenges and hackathons, accessed March 27, 2025, [https://www.hackerearth.com/blog/developers/how-to-create-effective-problem-statements-for-idea-challenges-and-hackathons/](https://www.hackerearth.com/blog/developers/how-to-create-effective-problem-statements-for-idea-challenges-and-hackathons/)  
46. CIIS/Highground Hackathon Problem Statement: Mental Health Assessment \- YouTube, accessed March 27, 2025, [https://www.youtube.com/watch?v=l87wC1VpvIc](https://www.youtube.com/watch?v=l87wC1VpvIc)  
47. Dining Philosopher Problem Using Semaphores \- GeeksforGeeks, accessed March 27, 2025, [https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/)  
48. How to Recruit Using a Hackathon \- WeCP, accessed March 27, 2025, [https://www.wecreateproblems.com/blog/how-to-recruit-using-a-hackathon](https://www.wecreateproblems.com/blog/how-to-recruit-using-a-hackathon)  
49. Hosting Hackathons: The Organizer's Checklist \- Alexey on Growth Engineering, accessed March 27, 2025, [https://alexeymk.com/hosting-hackathons-the-organizers-checklist/](https://alexeymk.com/hosting-hackathons-the-organizers-checklist/)  
50. 25+ Hackathon Project Ideas: Creative Solutions to Inspire Your Next Big Win \- Inspirit AI, accessed March 27, 2025, [https://www.inspiritai.com/blogs/ai-blog/hackathon-project-ideas](https://www.inspiritai.com/blogs/ai-blog/hackathon-project-ideas)  
51. 10 Best Project Ideas for Hackathons in 2025 \- GeeksforGeeks, accessed March 27, 2025, [https://www.geeksforgeeks.org/project-ideas-for-hackathons/](https://www.geeksforgeeks.org/project-ideas-for-hackathons/)  
52. AI Hackathon Ideas For Developers 2025 | Restackio, accessed March 27, 2025, [https://www.restack.io/p/ai-hackathons-knowledge-ai-hackathon-ideas](https://www.restack.io/p/ai-hackathons-knowledge-ai-hackathon-ideas)  
53. Meet The Champs: 1st Place Winners at the A2SV Hackathon\! \- YouTube, accessed March 27, 2025, [https://www.youtube.com/watch?v=Dg0kIilF-Nw](https://www.youtube.com/watch?v=Dg0kIilF-Nw)  
54. Top Hackathon Project Ideas And Topics For Beginners \- Careers360, accessed March 27, 2025, [https://www.careers360.com/courses-certifications/articles/top-hackathon-project-ideas-for-beginners](https://www.careers360.com/courses-certifications/articles/top-hackathon-project-ideas-for-beginners)  
55. 12 Hackathon Themes to Innovate Your Business \- AngelHack, accessed March 27, 2025, [https://angelhack.com/blog/hackathon-themes/](https://angelhack.com/blog/hackathon-themes/)  
56. 7 Hackathon themes for your next company hackathon \- Taikai.network, accessed March 27, 2025, [https://taikai.network/en/blog/7-hackathon-themes-for-companies](https://taikai.network/en/blog/7-hackathon-themes-for-companies)  
57. A Hackathon Philosophy From Warren Wilbee of Microsoft \- API Evangelist, accessed March 27, 2025, [https://apievangelist.com/2012/10/24/a-hackathon-philosophy-from-warren-wilbee-of-microsoft/](https://apievangelist.com/2012/10/24/a-hackathon-philosophy-from-warren-wilbee-of-microsoft/)  
58. What's Up With the Hackathons, Man? | Opinion \- The Harvard Crimson, accessed March 27, 2025, [https://www.thecrimson.com/column/somebody-fix-the-copy-machine/article/2015/4/9/civic-hackathons-public-service/](https://www.thecrimson.com/column/somebody-fix-the-copy-machine/article/2015/4/9/civic-hackathons-public-service/)  
59. Prompt Engineering Hackathon for Humanities \- ASU Events \- Arizona State University, accessed March 27, 2025, [https://asuevents.asu.edu/event/prompt-engineering-hackathon-humanities](https://asuevents.asu.edu/event/prompt-engineering-hackathon-humanities)  
60. (Unofficial) Weekend Project / Hackathon Ideas \- Community \- OpenAI Developer Forum, accessed March 27, 2025, [https://community.openai.com/t/unofficial-weekend-project-hackathon-ideas/1150059](https://community.openai.com/t/unofficial-weekend-project-hackathon-ideas/1150059)  
61. Platforms to find hackathons? \- Reddit, accessed March 27, 2025, [https://www.reddit.com/r/hackathon/comments/igl4tt/platforms\_to\_find\_hackathons/](https://www.reddit.com/r/hackathon/comments/igl4tt/platforms_to_find_hackathons/)  
62. Registrations \- Hackathon Organizer Guide \- Major League Hacking, accessed March 27, 2025, [https://guide.mlh.io/general-information/managing-registrations/registration-timelines](https://guide.mlh.io/general-information/managing-registrations/registration-timelines)  
63. Choosing the Best Virtual Hackathon Platform: A Comprehensive Guide \- StackUp, accessed March 27, 2025, [https://stackup.dev/blog/virtual-hackathon-platform/](https://stackup.dev/blog/virtual-hackathon-platform/)  
64. DoraHacks \- Blockchain & Frontier-tech Hacker Hub, accessed March 27, 2025, [https://dorahacks.io/](https://dorahacks.io/)  
65. The 7 Best Platforms to find Online hackathons | by DataMeka \- Medium, accessed March 27, 2025, [https://medium.com/@contact\_3313/the-7-best-platforms-to-find-online-hackathons-a9a4c5e588a6](https://medium.com/@contact_3313/the-7-best-platforms-to-find-online-hackathons-a9a4c5e588a6)  
66. Australasian Philosothon \- Ethics Olympiad, accessed March 27, 2025, [https://ethicsolympiad.org/AustralasianPhilosothonReportBuchanan.pdf](https://ethicsolympiad.org/AustralasianPhilosothonReportBuchanan.pdf)  
67. What philosophical questions are good conversation starters among laymen? : r/askphilosophy \- Reddit, accessed March 27, 2025, [https://www.reddit.com/r/askphilosophy/comments/6jsmhn/what\_philosophical\_questions\_are\_good/](https://www.reddit.com/r/askphilosophy/comments/6jsmhn/what_philosophical_questions_are_good/)  
68. 10 Philosophical Questions that Make You Think \- YouTube, accessed March 27, 2025, [https://www.youtube.com/watch?v=Rle8hTbnJw4](https://www.youtube.com/watch?v=Rle8hTbnJw4)  
69. Teaching Students How To Ask Philosophical Questions \- Daily Nous, accessed March 27, 2025, [https://dailynous.com/2019/10/02/teaching-students-ask-philosophical-questions/](https://dailynous.com/2019/10/02/teaching-students-ask-philosophical-questions/)  
70. What type of questions can we ask? (When, where etc) \- Philosophy Stack Exchange, accessed March 27, 2025, [https://philosophy.stackexchange.com/questions/38035/what-type-of-questions-can-we-ask-when-where-etc](https://philosophy.stackexchange.com/questions/38035/what-type-of-questions-can-we-ask-when-where-etc)  
71. How does philosophy decide which questions are worth investigating and answering? : r/askphilosophy \- Reddit, accessed March 27, 2025, [https://www.reddit.com/r/askphilosophy/comments/x8sw94/how\_does\_philosophy\_decide\_which\_questions\_are/](https://www.reddit.com/r/askphilosophy/comments/x8sw94/how_does_philosophy_decide_which_questions_are/)  
72. Full article: Fostering a Tech Culture through Campus Collaborations: A Case Study of a Hackathon and Library Partnership \- Taylor and Francis, accessed March 27, 2025, [https://www.tandfonline.com/doi/full/10.1080/0194262X.2021.1963388](https://www.tandfonline.com/doi/full/10.1080/0194262X.2021.1963388)  
73. Rules for Philosophical Community of Inquiry \- One World Centre, accessed March 27, 2025, [https://www.oneworldcentre.org.au/wp/wp-content/uploads/2013/12/Communities-of-Inquiry.ppsx](https://www.oneworldcentre.org.au/wp/wp-content/uploads/2013/12/Communities-of-Inquiry.ppsx)  
74. Building a Community of Philosophical Inquiry Online \- PLATO \- Philosophy Learning and Teaching Organization, accessed March 27, 2025, [https://www.plato-philosophy.org/building-a-community-of-philosophical-inquiry-online/](https://www.plato-philosophy.org/building-a-community-of-philosophical-inquiry-online/)  
75. Guidelines for Respectful, Constructive and Inclusive Philosophical Discussion \- David Chalmers, accessed March 27, 2025, [https://consc.net/guidelines/](https://consc.net/guidelines/)  
76. Philosothon Newsletter No 7 \- YMLP, accessed March 27, 2025, [https://ymlp.com/zZufSB](https://ymlp.com/zZufSB)  
77. UQ Philosothon \- Thinking Schools, accessed March 27, 2025, [https://www.thinkingschools.net/uq-philosothon](https://www.thinkingschools.net/uq-philosothon)  
78. Philosothon Newsletter No 9 September 2019 \- YMLP, accessed March 27, 2025, [https://ymlp.com/z97gWf](https://ymlp.com/z97gWf)  
79. Bath Schools Philosothon \- ISC, accessed March 27, 2025, [https://www.schoolstogether.org/case-studies/bath-schools-philosothon/](https://www.schoolstogether.org/case-studies/bath-schools-philosothon/)

================================================================================
FILE: docs/event_info/proposal_to_students.md
TYPE: documentation
SIZE: 4497 bytes
LAST MODIFIED: 2025-03-29T19:12:55.656899
================================================================================

# **Philosothon: A Philosophy Hackathon โ Call for Participants**

Hey Philosophy Students!

Ever wanted more chances to dive into extended philosophical discussions with your peers? Tired of philosophy being just you, alone with your books and papers? The **Philosophy of Technology Group** invites you to join our experimental **Philosothon** โ a one-day intensive philosophical collaboration event happening **April 7-8, 2025**.

## **What is a Philosothon?**

Think of it as a philosophy hackathon โ but instead of coding, we're creating philosophical arguments. You'll team up with fellow students to tackle a compelling philosophical theme related to technology. You'll develop ideas together, create a written piece, and present your thinking to a panel of graduate student judges. It's philosophy as a team sport!

## **Why Participate?**

* **Break out of solitary philosophical work** โ Philosophy courses rarely give us the chance to think collaboratively. Here's your opportunity!
* **Engage with ideas at the intersection of philosophy and technology** โ Explore themes like consciousness and AI, digital commons, algorithmic governance, or technological mediation
* **Experience philosophy as a creative, generative practice** โ Not just analyzing others' ideas, but building something together
* **Connect with other philosophy students** you might not meet in your courses
* **Get feedback on your ideas** in a low-stakes, supportive environment from graduate students
* **Participate in unique workshops** including a hands-on session with Pascal Quest technology

## **Event Details**

**Monday, April 7:**
* 8:30AM: Sign-in and welcome
* 9:00AM: Opening remarks and theme announcement
* 12:00-1:00PM: Philosophy of Technology workshop and lunch
* 6:00-8:00PM: Pascal Quest workshop (limited to one representative per team)
* 11:59PM: Submission deadline

**Tuesday, April 8:**
* 10:30AM-12:30PM: Team presentations
* 12:30-2:00PM: Discussion, feedback, and closing

**Location:** Bahen Atrium

## **How Teams Work**

We believe philosophy is enriched through diverse perspectives. Our matchmaking process is designed with this in mind. When you sign up, you'll tell us whether you'd prefer teammates with similar philosophical interests or different ones. Maybe you want to dive deep with someone who shares your passion for phenomenology, or perhaps you'd benefit more from the creative friction of working with someone from a different philosophical tradition.

Upper-year students can opt to mentor newer philosophy students (and we hope you will!), while first or second years can request to be paired with more experienced students. This creates learning opportunities flowing in both directions โ fresh perspectives meet developed knowledge.

Teams will be announced by Thursday, April 3rd, giving you time to connect before the event.

## **Philosophical Themes**

The exact theme will be selected through participant voting and revealed at the opening, but might include:

* Minds and Machines: Consciousness Beyond the Human
* Digital Commons: Rethinking Property in Information Space
* Algorithmic Governance: Authority Without Autonomy?
* Technological Singularity: Philosophical Implications of Superintelligence
* Extended Perception: Technology and Phenomenological Experience
* Digital Ethics: Beyond Utilitarian Frameworks
* Attention Economies: The Commodification of Consciousness
* Algorithmic Aesthetics: Beauty in the Age of Machine Creation

You'll also help us choose a workshop for Saturday evening, with options like:

* Language Models as Philosophical Objects
* Generative AI Art: Creativity, Authorship, and Aesthetics
* Reinforcement Learning: The Technical Foundations of AI "Creativity"
* Technology as Tool vs Master: Beyond Instrumentalism
* Digital Commons and Information Capitalism
* The Attention Economy: Technical Mechanisms and Philosophical Implications

## **How to Apply**

This is a small trial event limited to 15-30 participants. Simply fill out the sign-up form by Thursday, April 3rd at noon. We'll ask about your interests, experience level, and preferences for teammates and topics. If more people apply than we can accommodate, we'll aim for a diverse mix of participants.

[Google Form Link]

## **Questions?**

Reach out to logan.rooks@mail.utoronto.ca with any questions.


**Join us in reimagining how philosophy can be practiced!**

Logan Rooks  
PCU Tech and Society Liaison  
Philosophy of Technology Group

================================================================================
FILE: docs/event_info/theme_descriptions.md
TYPE: documentation
SIZE: 7804 bytes
LAST MODIFIED: 2025-03-28T00:43:01.914730
================================================================================

# Philosothon Theme Descriptions

**Note to Students:** These themes are starting points, not limitations. If you have ideas for themes not listed here, please suggest them when you sign up! If we see common interests emerging, we'll hold another vote on Tuesday to include student-suggested themes. The same applies to workshop topics. Sign up early to have your ideas considered!

## Minds and Machines: Consciousness Beyond the Human

This theme explores the philosophical implications of artificial intelligence and machine consciousness. What is the nature of mind, and could machines ever possess it? How do we understand consciousness, intentionality, and meaning in both human and artificial systems?

**Analytic Tradition:**
- John Searle (Chinese Room argument)
- Daniel Dennett (multiple drafts theory of consciousness)
- Hilary Putnam (functionalism)
- David Chalmers (the hard problem of consciousness)
- Patricia Churchland (neurophilosophy)
- Ned Block (access vs. phenomenal consciousness)
- Susan Schneider (artificial consciousness)

**Continental Tradition:**
- Edmund Husserl (phenomenology)
- Martin Heidegger (question concerning technology)
- Maurice Merleau-Ponty (embodied cognition)
- Gilbert Simondon (individuation and technical objects)
- Bernard Stiegler (technics and time)
- Luciano Floridi (philosophy of information)
- Katherine Hayles (posthumanism)

## Digital Commons: Rethinking Property in Information Space

This theme examines ownership, access, and justice in digital environments. How should we conceptualize ownership of digital resources? What ethical frameworks best address questions of information enclosure versus knowledge commons?

**Analytic Tradition:**
- John Locke (labor theory of property)
- G.A. Cohen (self-ownership thesis)
- Robert Nozick (entitlement theory)
- Lawrence Lessig (code is law)
- Elinor Ostrom (commons governance)
- Michael Sandel (limits of markets)
- Helen Nissenbaum (contextual integrity)

**Continental Tradition:**
- Karl Marx (critique of private property)
- Michel Foucault (power/knowledge)
- Michael Hardt & Antonio Negri (commonwealth)
- Pierre Dardot & Christian Laval (common)
- Yochai Benkler (wealth of networks)
- Evgeny Morozov (tech solutionism)
- Jaron Lanier (who owns the future)

## Algorithmic Governance: Authority Without Autonomy?

This theme investigates how algorithms increasingly shape social decisions and governance. Who (or what) has authority in systems partially governed by algorithms? What happens to autonomy, sovereignty, and democratic deliberation in algorithmic systems?

**Analytic Tradition:**
- John Rawls (justice as fairness)
- Martha Nussbaum (capabilities approach)
- Philip Pettit (freedom as non-domination)
- Joseph Raz (authority and legitimacy)
- Cathy O'Neil (weapons of math destruction)
- Sheila Jasanoff (co-production of knowledge)
- Safiya Noble (algorithmic oppression)

**Continental Tradition:**
- Michel Foucault (governmentality)
- Giorgio Agamben (state of exception)
- Jรผrgen Habermas (public sphere)
- Jacques Ranciรจre (politics and aesthetics)
- Antoinette Rouvroy (algorithmic governmentality)
- Wendy Brown (undoing the demos)
- Achille Mbembe (necropolitics)

## Technological Singularity: Philosophical Implications of Superintelligence

This theme explores the concept of technological singularityโa hypothetical point where artificial intelligence surpasses human intelligence, potentially fundamentally transforming civilization. What are the philosophical implications of such a possibility?

**Analytic Tradition:**
- Nick Bostrom (superintelligence)
- David Chalmers (singularity)
- John Searle (strong AI skepticism)
- Stuart Russell (human compatible AI)
- Susan Schneider (artificial you)
- Eliezer Yudkowsky (friendly AI)
- Toby Ord (existential risk)

**Continental Tradition:**
- Jean Baudrillard (simulation and hyperreality)
- Donna Haraway (cyborg manifesto)
- Jean-Franรงois Lyotard (postmodern condition)
- Paul Virilio (dromology and technology)
- Rosi Braidotti (posthumanism)
- Bernard Stiegler (technics and time)
- Benjamin Bratton (the stack)

## Extended Perception: Technology and Phenomenological Experience

This theme examines how technology alters our perceptual experience of the world. How do technologies extend, mediate, or transform our embodied experience? What is the relationship between technologically-mediated perception and reality?

**Analytic Tradition:**
- Andy Clark & David Chalmers (extended mind thesis)
- Alva Noรซ (enactive perception)
- Susan Hurley (externalism)
- J.J. Gibson (ecological psychology)
- Ruth Millikan (biosemantics)
- Shaun Gallagher (embodied cognition)
- Don Ihde (instrumental realism)

**Continental Tradition:**
- Maurice Merleau-Ponty (phenomenology of perception)
- Martin Heidegger (ready-to-hand vs. present-at-hand)
- Don Ihde (postphenomenology)
- Vilรฉm Flusser (philosophy of photography)
- Sarah Ahmed (queer phenomenology)
- Evan Thompson (mind in life)
- Peter-Paul Verbeek (technological mediation)

## Digital Ethics: Beyond Utilitarian Frameworks

This theme challenges students to develop ethical frameworks for digital technologies that move beyond simple consequentialist calculations. What ethical approaches best capture our moral intuitions about digital technologies?

**Analytic Tradition:**
- John Rawls (justice as fairness)
- T.M. Scanlon (contractualism)
- Elizabeth Anderson (value pluralism)
- Shannon Vallor (technology and virtues)
- Charles Ess (digital media ethics)
- Luciano Floridi (information ethics)
- Helen Nissenbaum (contextual integrity)

**Continental Tradition:**
- Emmanuel Levinas (ethics of the other)
- Hans Jonas (imperative of responsibility)
- Martha Nussbaum (capabilities approach)
- Charles Taylor (ethics of authenticity)
- Bruno Latour (actor-network theory)
- Bernard Stiegler (pharmacology of technology)
- Marรญa Puig de la Bellacasa (ethics of care)

## Attention Economies: The Commodification of Consciousness

This theme examines how attention has become an economic resource in digital environments. How do technologies capture, direct, and monetize attention? What are the ethical, political, and existential implications of attention as commodity?

**Analytic Tradition:**
- Herbert Simon (attention scarcity)
- Michael Goldhaber (attention economy)
- Matthew Crawford (world beyond your head)
- Tim Wu (attention merchants)
- James Williams (ethics of attention)
- Helen Nissenbaum (privacy in context)
- Harry Frankfurt (importance of what we care about)

**Continental Tradition:**
- Guy Debord (society of the spectacle)
- Jonathan Crary (24/7 capitalism)
- Bernard Stiegler (attention economy)
- Franco Berardi (soul at work)
- Byung-Chul Han (psychopolitics)
- Yves Citton (ecology of attention)
- Shoshana Zuboff (surveillance capitalism)

## Algorithmic Aesthetics: Beauty in the Age of Machine Creation

This theme explores how machine learning is transforming artistic creation and aesthetic experience. What is the nature of creativity when algorithms generate art? How should we understand authorship, originality, and aesthetic value in the age of AI?

**Analytic Tradition:**
- Nelson Goodman (languages of art)
- Arthur Danto (transfiguration of the commonplace)
- Kendall Walton (mimesis as make-believe)
- Margaret Boden (creative AI)
- David Davies (art as performance)
- Noรซl Carroll (philosophy of art)
- Aaron Meskin (computational aesthetics)

**Continental Tradition:**
- Walter Benjamin (art in the age of mechanical reproduction)
- Theodor Adorno (aesthetic theory)
- Jean Baudrillard (simulacra and simulation)
- Jacques Ranciรจre (distribution of the sensible)
- Nicolas Bourriaud (relational aesthetics)
- Vilรฉm Flusser (philosophy of photography)
- Claire Bishop (artificial hells)

================================================================================
FILE: docs/event_info/workshop_descriptions.md
TYPE: documentation
SIZE: 3723 bytes
LAST MODIFIED: 2025-03-28T00:45:36.454208
================================================================================

# Philosothon Workshop Descriptions

## Philosophy of Technology Workshops

### Language Models as Philosophical Objects
*Explore large language models beyond their practical applications, focusing on their philosophical implications. How do LLMs challenge our understanding of knowledge, creativity, and meaning? What new philosophical questions emerge from these technologies?*

**Relevant themes:**
- Minds and Machines (Primary)
- Technological Singularity (Primary)
- Algorithmic Aesthetics (Strong)
- Epistemic Dimensions of AI (Strong)

### Generative AI Art: Creativity, Authorship, and Aesthetics
*Explore generative AI art tools hands-on while engaging with philosophical questions about creativity, authorship, and aesthetic value. What counts as art in an age when machines can generate images? Does AI-generated art challenge our understanding of artistic expression?*

**Relevant themes:**
- Algorithmic Aesthetics (Primary)
- Minds and Machines (Strong)
- Digital Ethics (Moderate)
- Extended Perception (Moderate)

### Reinforcement Learning: The Technical Foundations of AGI
*This workshop demystifies reinforcement learning technologies that underpin modern AI systems, providing philosophy students with technical grounding while exploring questions of creativity, agency, and intention in artificial systems.*

**Relevant themes:**
- Minds and Machines (Primary)
- Technological Singularity (Primary)
- Algorithmic Aesthetics (Strong)
- Algorithmic Governance (Moderate)

### Technology as Tool vs Master: Beyond Instrumentalism
*Drawing on Heidegger, Feenberg, and other thinkers, this workshop examines competing frameworks for understanding our relationship with technology. Are we using technology, or is it using us? We'll explore instrumental, deterministic, and critical theories of technology.*

**Relevant themes:**
- Extended Perception (Primary)
- Technological Singularity (Primary)
- Digital Ethics (Strong)
- Attention Economies (Strong)

### Digital Commons and Information Capitalism
*This workshop explores the political economy of information and knowledge in digital spaces. Drawing on theories from Ostrom to Marx, we'll examine how property, enclosure, and commons function in information economies.*

**Relevant themes:**
- Digital Commons (Primary)
- Digital Ethics (Strong)
- Algorithmic Governance (Strong)
- Attention Economies (Moderate)

### The Attention Economy: Technical Mechanisms and Philosophical Implications
*Explore the technical systems designed to capture, direct, and monetize attention, alongside philosophical reflections on consciousness, agency, and value in an attention-based economy.*

**Relevant themes:**
- Attention Economies (Primary)
- Digital Ethics (Strong)
- Extended Perception (Strong)
- Digital Commons (Moderate)

### Thinking Through Technical Systems: A Philosophical Approach
*This workshop explores methodologies for critically examining the logic and values embedded in technical systems. Participants will learn frameworks for analyzing technologies as philosophical objects with their own ontologies and epistemologies.*

**Relevant themes:**
- Algorithmic Governance (Primary)
- Digital Ethics (Strong)
- Digital Commons (Strong)
- Technological Singularity (Moderate)

### Design Philosophy: From Metaphysics to Material Reality
*How do philosophical commitments manifest in technological design? This workshop explores the relationship between metaphysical positions and the creation of technologies, examining how designers' philosophical assumptions shape our technical environment.*

**Relevant themes:**
- Extended Perception (Primary)
- Algorithmic Aesthetics (Strong)
- Digital Ethics (Moderate)
- Minds and Machines (Moderate)

================================================================================
FILE: docs/plans/plan_about_philosothons.md
TYPE: documentation
SIZE: 4024 bytes
LAST MODIFIED: 2025-03-30T03:20:49.874331
================================================================================


## Recommended Website Section: "About Philosothons"

### Structure Recommendation

Create a main landing page with concise sections, each linking to a dedicated subpage for those who want to explore further:

1. **What is a Philosothon?** (Brief definition with visual)
2. **History & Origins** (Condensed timeline)
3. **How Philosothons Work** (Simple explanation of format)
4. **Impact & Outcomes** (Benefits for students)
5. **Our Approach** (How your event adapts the tradition)

### Content Transformation

For the landing page, I'd distill the 10,000+ word document into something like this:

```markdown
# The Philosothon Tradition

## What is a Philosothon?

A Philosothon brings together students to engage in collaborative philosophical inquiry through structured discussions called Communities of Inquiry (COI). Unlike traditional debate formats, Philosothons emphasize cooperative thinking, where participants build upon each other's ideas rather than competing against them.

[Learn more about the Philosothon format โ]

## Origins & History

The first Philosothon was developed in 2007 at Hale School in Perth, Australia by Matthew Wills and Leanne Rucks. What began as a local event with nine schools quickly expanded, leading to the first national Australasian Philosothon in 2011. The concept spread to the United Kingdom in 2012 and has since gained international recognition.

[Explore the history of Philosothons โ]

## How Philosothons Work

In a traditional Philosothon, students from different schools form mixed discussion groups to explore philosophical questions together. Facilitated by experienced educators or philosophers, these discussions are evaluated by judges who consider the quality of thinking, collaborative skills, and philosophical rigor demonstrated by participants.

[See Philosothons in action โ]

## Why Philosothons Matter

Research shows that participating in Philosothons helps students develop critical thinking, communication skills, and intellectual confidence. By engaging with diverse perspectives in a supportive environment, students learn to articulate complex ideas, evaluate arguments, and build on others' thoughtsโskills that extend far beyond the philosophy classroom.

[Read about Philosothon outcomes โ]

## Our Philosothon Approach

Our Philosophy of Technology Group's Philosothon adapts this established tradition for university students, focusing on questions at the intersection of philosophy and technology. While maintaining the collaborative spirit of traditional Philosothons, we've introduced elements from hackathons to encourage creative problem-solving and concrete outputs alongside philosophical dialogue.

[Learn about our unique format โ]
```

### For Subpages

Each linked subpage could contain more detailed information from the original document, but still condensed and reorganized with:

1. **Clear headings and subheadings**
2. **Bulleted lists** instead of dense paragraphs
3. **Quotes or testimonials** from past participants
4. **Visual elements** like diagrams of the COI process
5. **Comparison tables** (like the ones in your original document)

## Visual Enhancements

I recommend adding:
- A timeline graphic showing Philosothon development from 2007 to present
- Photos from past events (if available)
- Icons representing key skills developed (critical thinking, collaboration, etc.)
- Sample philosophical questions from previous events
- Diagrams showing how a Community of Inquiry works

## Final Recommendation

The original document contains valuable information but needs significant restructuring for web presentation. Focus on creating a hierarchical, scannable experience that allows visitors to quickly grasp what Philosothons are while providing pathways to deeper information for those who want it. 

The goal should be to communicate the essence of the Philosothon tradition while showing how your event innovates upon itโall in a visually appealing, accessible format that won't overwhelm students.

================================================================================
FILE: docs/plans/plan_website.md
TYPE: documentation
SIZE: 0 bytes
LAST MODIFIED: 2025-03-28T17:13:30.863784
================================================================================



================================================================================
FILE: docs/project_specifications.md
TYPE: documentation
SIZE: 13457 bytes
LAST MODIFIED: 2025-03-30T03:27:06.718391
================================================================================

# Philosothon Website Project Specification (Revised)

**Project Name:** Philosothon Event Platform  
**Version:** 1.1  
**Date:** March 30, 2025  

## 1. Executive Summary

This document outlines the specifications for developing a web platform to support the Philosothon event at the University of Toronto, with a focus on rapid implementation within a 2-day development window. The platform will initially focus on delivering event information and basic registration capabilities through an integrated Google Forms approach, with an architecture designed to easily accommodate future features such as team management, submission handling, and feedback collection.

Following careful consideration of multiple architectural options, this specification outlines an approach that balances immediate delivery needs with long-term maintainability and extensibility.

## 2. Project Scope

### 2.1 Core Deliverables (2-Day Implementation)

1. **Public Information Pages**
   - Home page with event overview and countdown
   - About page explaining Philosothon concept and history
   - Themes page detailing philosophical topics
   - Workshop descriptions
   - FAQ page with detailed answers to common questions

2. **Registration System**
   - Google Forms integration for participant registration
   - Embedded form on website
   - Form designed to collect all necessary participant data
   - Manual data export process for team formation

3. **Simple Admin Interface**
   - Password-protected admin area
   - Basic dashboard for viewing exported registration data
   - Interface for managing event content

### 2.2 Future Extensions (Post-MVP)

1. **Team Formation System**
   - Database integration for registration data
   - Algorithm for matching participants based on preferences
   - Team management interface
   - Automated notifications

2. **Submission Portal**
   - Team file uploads
   - Submission receipt generation

3. **Feedback Collection**
   - Post-event surveys
   - Analytics dashboard

4. **Judge Portal**
   - Presentation scheduling
   - Scoring interface

## 3. System Architecture & Technology Decisions

### 3.1 Technology Stack

| Component | Selected Technology | Alternatives Considered | Justification |
|-----------|---------------------|-------------------------|---------------|
| **Frontend Framework** | Next.js | Static Site Generator, WordPress, SPA | โข Server-side rendering for SEO<br>โข API routes for future backend needs<br>โข File-based routing for developer efficiency<br>โข React ecosystem compatibility |
| **UI Framework** | Tailwind CSS | Bootstrap, Material UI, Chakra UI | โข Utility-first approach speeds development<br>โข No unnecessary JavaScript<br>โข Highly customizable<br>โข Excellent with AI code assistance |
| **Registration System** | Google Forms | Custom forms, Typeform, Airtable | โข Zero development time<br>โข Complex question logic support<br>โข Free tier sufficient<br>โข Familiar interface for users |
| **Database** | Supabase | Firebase, MongoDB, Excel | โข Relational model suits event data<br>โข Built-in auth for admin access<br>โข Row-level security for future features<br>โข Free tier sufficient for event scale |
| **Authentication** | Supabase Auth (Email-only) | NextAuth.js, Custom JWT | โข Simplest implementation for admin-only auth<br>โข No user accounts needed initially<br>โข Easily extensible for future needs |
| **Deployment** | Vercel | Netlify, GitHub Pages, AWS | โข Optimized for Next.js<br>โข Preview deployments speed development<br>โข Free tier sufficient<br>โข Minimal configuration |

### 3.2 High-Level Architecture

```
+----------------+                 +-------------------+
|                |    Embedded     |                   |
|  Google Forms  | <-------------> |  Next.js Website  | 
|                |      Form       |                   |
+----------------+                 +--------+----------+
        |                                   ^
        |                                   |
        v                                   v
+----------------+                 +-------------------+
|                |    Manual       |                   |
| Google Sheets  | ------------+-> |  Supabase DB      |
|                |    Import    |  |                   |
+----------------+              |  +--------+----------+
                                |           ^
                                |           |
                                v           v
                          +---------------------+
                          |                     |
                          | Admin Interface     |
                          | (Protected Routes)  |
                          |                     |
                          +---------------------+
```

### 3.3 Key Design Decisions

| Decision Area | Selected Approach | Rationale |
|---------------|-------------------|-----------|
| **Registration Flow** | Google Forms with manual data import | โข Fastest implementation<br>โข Complete feature set<br>โข Minimal technical debt<br>โข Acceptable for first event |
| **Authentication** | Email-based admin access only | โข Students don't need accounts<br>โข Simplifies development<br>โข Secure admin access |
| **Rendering Strategy** | Hybrid (SSG + SSR) | โข Static pages for content<br>โข Server components for dynamic data<br>โข Optimal performance |
| **Content Management** | Database-driven with admin interface | โข Flexibility to update content<br>โข Structured data for future features |

## 4. Detailed Specifications

### 4.1 Frontend Implementation

#### 4.1.1 Page Structure

| Page | Route | Description | Components |
|------|-------|-------------|------------|
| Home | `/` | Event overview, countdown | Hero, Countdown, EventHighlights |
| About | `/about` | Philosothon concept and history | ContentBlock, Timeline |
| Themes | `/themes` | Theme descriptions | ThemeCard, FilterControls |
| Workshops | `/workshops` | Workshop descriptions | WorkshopCard, TagFilter |
| FAQ | `/faq` | Frequently asked questions | AccordionGroup, SearchBar |
| Register | `/register` | Embedded Google Form | FormEmbed, InstructionBlock |
| Admin Dashboard | `/admin` | Protected admin area | DataTable, StatusFilters |

#### 4.1.2 Component Hierarchy

```
Layout
โโโ NavBar
โโโ PageContainer
โ   โโโ [Page-specific components]
โโโ Footer

FormEmbed
โโโ IntroductionText
โโโ GoogleFormEmbed
โโโ SubmissionInstructions
```

#### 4.1.3 State Management

- React Context API for theme and admin authentication
- Server components for data fetching where possible
- Minimal client-side state for UI interactions

### 4.2 Backend Implementation

#### 4.2.1 API Routes

| Endpoint | Method | Purpose | Auth Required |
|----------|--------|---------|--------------|
| `/api/auth/login` | POST | Email magic link login | No |
| `/api/content/themes` | GET | Retrieve all themes | No |
| `/api/content/workshops` | GET | Retrieve all workshops | No |
| `/api/admin/registrations` | GET | Get registration data | Yes (Admin) |
| `/api/admin/content` | PUT | Update site content | Yes (Admin) |

#### 4.2.2 Authentication Logic

- Email magic link for admin access
- No registration required for students
- Session management using Supabase Auth
- Protected API routes and admin pages

#### 4.2.3 Google Forms Integration

1. Design comprehensive registration form in Google Forms
2. Embed form on website using iframe or JavaScript embed
3. Configure form to collect all necessary data:
   - Personal information
   - Philosophy background
   - Theme/workshop preferences (ranked choice)
   - Mentor/mentee preferences
   - Team pairing preferences
4. Link form to Google Sheet
5. Create manual export process to CSV
6. Import process to database for admin review

### 4.3 Database Schema

```sql
-- ADMIN USERS
-- Handled by Supabase Auth

-- CONTENT MANAGEMENT

CREATE TABLE themes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  created_at TIMESTAMPTZ DEFAULT now(),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  analytic_tradition TEXT,
  continental_tradition TEXT,
  is_selected BOOLEAN DEFAULT FALSE
);

CREATE TABLE workshops (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  created_at TIMESTAMPTZ DEFAULT now(),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  relevant_themes JSONB,
  facilitator TEXT,
  max_capacity INTEGER
);

CREATE TABLE faq_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  created_at TIMESTAMPTZ DEFAULT now(),
  question TEXT NOT NULL,
  answer TEXT NOT NULL,
  category TEXT,
  display_order INTEGER
);

-- REGISTRATION DATA (FOR FUTURE AUTOMATION)

CREATE TABLE registrations (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  created_at TIMESTAMPTZ DEFAULT now(),
  import_batch TEXT,
  
  -- From Google Forms import
  full_name TEXT NOT NULL,
  email TEXT NOT NULL,
  academic_year TEXT NOT NULL,
  program TEXT NOT NULL,
  philosophy_background TEXT,
  self_rated_confidence INTEGER,
  interest_areas TEXT[],
  theme_preferences JSONB,
  workshop_preferences JSONB,
  is_mentor BOOLEAN DEFAULT FALSE,
  is_mentee BOOLEAN DEFAULT FALSE,
  interest_similarity_preference INTEGER,
  teammate_requests TEXT[],
  dietary_restrictions TEXT,
  accessibility_needs TEXT,
  extension_status TEXT,
  
  -- Added during review
  status TEXT DEFAULT 'pending',
  admin_notes TEXT,
  team_id UUID
);
```

### 4.4 Design System

#### 4.4.1 Color Palette

- Primary: `#3B82F6` (Blue)
- Secondary: `#6B7280` (Gray)
- Accent: `#8B5CF6` (Purple)
- Background: `#F9FAFB` (Light Gray)
- Text: `#1F2937` (Dark Gray)

#### 4.4.2 Typography

- Headings: Philosopher (serif)
- Body: Inter (sans-serif)
- Monospace: JetBrains Mono (for code snippets)

## 5. Development Process

### 5.1 Development Timeline

#### Day 1: Foundation & Core Pages

| Time | Task | Deliverable |
|------|------|-------------|
| 09:00-10:00 | Project setup, Supabase configuration | Working development environment |
| 10:00-12:00 | Layout components, navigation | Site shell with navigation |
| 12:00-14:00 | Home page and About page | Content-populated pages |
| 14:00-16:00 | Themes and Workshop pages | Complete theme information |
| 16:00-17:30 | FAQ page with accordion | Interactive FAQ system |
| 17:30-18:00 | Google Form design | Registration form draft |

#### Day 2: Registration & Admin

| Time | Task | Deliverable |
|------|------|-------------|
| 09:00-10:30 | Finalize Google Form | Complete registration system |
| 10:30-11:30 | Registration page with form embed | Working registration flow |
| 11:30-13:00 | Admin authentication | Secure admin access |
| 13:00-15:00 | Admin dashboard implementation | Basic admin interface |
| 15:00-16:00 | Data import process | Working CSV import |
| 16:00-17:00 | Testing & bug fixes | Stable application |
| 17:00-18:00 | Deployment | Live production site |

### 5.2 AI Acceleration Points

1. **Component Generation** - Using GitHub Copilot for React components
2. **Styling** - Tailwind class suggestion and optimization
3. **API Routes** - Endpoint implementation templates
4. **Auth Logic** - Security pattern implementation
5. **Form Design** - Google Form structure optimization

### 5.3 Testing Strategy

1. **Manual Testing** - Core user journeys
2. **Responsive Testing** - Mobile, tablet, desktop
3. **Form Testing** - Submission and validation
4. **Admin Testing** - Protected route security

## 6. Deployment & Operations

### 6.1 Deployment Strategy

1. GitHub repository with main branch protection
2. Vercel continuous deployment from main
3. Environment variables for sensitive configuration
4. Custom domain setup with SSL

### 6.2 Operations Processes

**Registration Data Handling:**
1. Export Google Sheet to CSV weekly
2. Import to database using admin interface
3. Review applications and mark status
4. Export team assignments

## 7. Future Extensions

### 7.1 Phase 2: Database Integration & Team Formation

1. Direct API integration with Google Forms (via Webhook)
2. Automated data import process
3. Team matching algorithm implementation
4. Email notification system for team assignments

### 7.2 Phase 3: Submission System

1. Team portal for file submissions
2. Receipt generation for submissions
3. Judge access for reviewing submissions
4. Presentation scheduling system

### 7.3 Phase 4: Full Platform

1. Custom registration form replacing Google Forms
2. Integrated voting for themes and workshops
3. Feedback collection system
4. Analytics dashboard for event outcomes

## 8. Appendix: Google Form Design

### Registration Form Structure

1. **Introduction**
   - Explanation of Philosothon
   - Expected time commitment
   - Important dates

2. **Personal Information**
   - Full name
   - Email address
   - Academic year
   - Program/Major
   - Dietary restrictions
   - Accessibility requirements

3. **Philosophy Background**
   - Philosophy courses taken
   - Self-rated confidence (1-10)
   - Areas of philosophical interest (checkboxes)

4. **Event Preferences**
   - Theme ranking (drag-and-drop ranking)
   - Workshop ranking (drag-and-drop ranking)
   - Mentorship preferences (options for mentor/mentee/neither)

5. **Team Formation**
   - Interest similarity preference (1-10 scale)
   - Specific teammate requests (optional)

6. **Logistics**
   - Extension status (requested/approved/not needed)
   - How they heard about the event

================================================================================
FILE: markdown/faq.md
TYPE: documentation
SIZE: 8169 bytes
LAST MODIFIED: 2025-03-30T17:56:56.968072
================================================================================

# Philosothon: Frequently Asked Questions

## General Questions

### What exactly is a Philosothon?
A Philosothon adapts the hackathon format for philosophical inquiry. Instead of programming, teams collaborate on developing philosophical arguments and perspectives within a limited timeframe.

### Do I need to be a philosophy specialist to participate?
Not at all! We welcome students from any program with an interest in philosophy. The event is designed to be accessible to those with varying levels of philosophical background.

### How much time commitment is required?
The event runs from 8:30AM to late evening on Monday, April 7th, and from 10:30AM to 2PM on Tuesday, April 8th. You should be prepared to dedicate most of Monday to the event.

## Team Formation

### How are teams formed?
Teams are created based on the preferences you indicate when signing up. You can request specific teammates, indicate whether you prefer working with people with similar or different interests, and specify if you'd like to mentor or be mentored.

### What if I already know who I want to work with?
You can request specific teammates on the sign-up form. If they also request you, we'll do our best to place you together. However, to maintain the experimental nature of the event, we'll limit pre-formed teams to maximize new connections.

### I'm a first-year student. Will I be at a disadvantage?
Not at all. The team formation process is designed to create balanced teams. First-year students bring fresh perspectives that are valuable to philosophical discussion, and if you prefer, you can be paired with more experienced students who can provide guidance.

## Themes and Voting

### How is the theme selected?
When you sign up, you'll rank the potential themes in order of preference. We'll use a ranked choice voting system to determine the winning theme, which will be announced at the opening of the event.

### What if there's a tie between themes?
If there's a close result between two themes, we might present both themes as options, allowing teams to choose which they prefer to address. We won't use more than two themes to maintain focus.

### How is the workshop topic selected?
Similar to theme selection, you'll rank workshop topics when signing up. We weight these votes based on their relevance to the chosen theme(s), giving priority to workshop topics that will be most useful for participants working on the selected theme.

## Workshops and Participation

### How do the workshops work?
We have two workshops scheduled:
1. **Philosophy of Technology Workshop** (Monday, 12:00-1:00PM): All participants attend this workshop, which includes lunch.
2. **Pascal Quest Workshop** (Monday, 6:00-8:00PM): This is a specialized workshop with limited capacity (7-14 participants). Each team will select one representative to attend.

### Why can only one person per team attend the Pascal Quest Workshop?
The Pascal Quest Workshop works best with a smaller group of 7-14 people. To maintain this ideal range while ensuring all teams benefit, we ask each team to send one representative who can then share insights with their teammates afterward.

### How should teams handle the Pascal Quest Workshop?
While one team member attends the Pascal Quest Workshop, the rest of the team should continue working on the project. After the workshop, teams should schedule time for the representative to share what they learned and discuss how these insights might inform their project.

## Presentations and Judging

### What format should our presentation take?
Each team will give a 10-minute presentation to the panel of judges. You have creative freedom in how you structure this, but it should clearly present your philosophical argument. Your presentation will be accompanied by a written component with more detailed argumentation and references.

### Who are the judges?
The judges will primarily be graduate students in philosophy, with possible participation from faculty members. They are selected for their expertise relevant to the event themes.

### What criteria will be used for judging?
Presentations will be judged on philosophical rigor, creativity, clarity, and how effectively they engage with the chosen theme. The judges will be looking for well-reasoned arguments that demonstrate both philosophical understanding and original thinking.

## Academic Workload and Extensions

### I'm worried about balancing this with my coursework. Any advice?
We understand this concern! The event is designed to be intellectually stimulating but manageable. Many students find that the collaborative nature of the Philosothon format actually helps them develop ideas they can later incorporate into their coursework. That said, we recommend reaching out to your professors in advance if you have assignments due around the event dates.

### Should I ask my professors for extensions on assignments?
This is entirely up to you. If you have assignments due right after the Philosothon weekend and are concerned about completing them, requesting an extension is an option. We recommend doing this well in advanceโideally at least a week before the event.

### How should I approach my professor about an extension?
Be honest, professional, and specific. Explain that you're participating in an educational philosophy event that will enhance your philosophical thinking ability. Focus on how this experience connects to your academic development and the course material. We provide a template email below that you can customize.

### What if my professor denies my extension request?
That's perfectly okay and within their rights. In that case, you'll need to plan ahead to complete your coursework before or during the event. Many students bring laptops and use breaks between Philosothon activities to work on assignments. Remember that the Philosothon runs primarily on Monday with just presentations on Tuesday morning.

### Can I still participate if I can't get extensions?
Absolutely! Most sessions take place on Monday with just the presentations on Tuesday morning. You can use evenings and time before/after the event to work on assignments. The submission deadline is flexibleโwhile it's officially 11:59PM Monday, teams can continue refining their work until their presentation time on Tuesday.

## Template for Extension Request

Below is a template email you can adapt when requesting an extension from your professor:

```
Subject: Request Regarding Assignment Due Date - Philosothon Participation

Dear Professor [Name],

I hope this email finds you well. I'm writing to inform you about an educational opportunity I've been selected to participate in and to request a brief extension on [assignment name] due on [current due date].

I've been invited to participate in the Philosophy of Technology Group's "Philosothon" on April 7-8, which is an intensive collaborative philosophy event at UofT where students work in teams to develop philosophical arguments on technology-related themes. The event includes workshops, structured discussions, and culminates in team presentations judged by philosophy graduate students and faculty.

Participation in this event would significantly enhance my philosophical thinking skills and complements the work we've been doing in [course name], particularly regarding [mention relevant course topics that connect to philosophy of technology]. The skills I'll developโcollaborative philosophical inquiry, presenting complex arguments, and engaging with diverse philosophical perspectivesโwill directly benefit my academic development.

Would it be possible to extend the deadline for [assignment name] from [current date] to [proposed date]? This would allow me to fully engage with both the Philosothon and complete a quality assignment for your course.

I understand if this isn't possible according to course policies. If an extension isn't feasible, I will plan accordingly to ensure I meet all deadlines.

Thank you for considering my request. I'm happy to provide any additional information about the Philosothon or discuss alternative arrangements.

Sincerely, [Your Name] [Student Number]
```

================================================================================
FILE: markdown/general_information.md
TYPE: documentation
SIZE: 3457 bytes
LAST MODIFIED: 2025-03-30T17:56:56.968072
================================================================================

# **Philosothon: Where Philosophy Meets Hackathon Culture**

## **An Experimental Event at the University of Toronto**

The Philosophy of Technology Group at the University of Toronto is hosting a groundbreaking event that brings the collaborative energy of hackathons to the world of philosophical inquiry. The **Philosothon** will take place on **April 7-8, 2025**, bringing together students for an intensive day of collaborative thinking on pressing questions at the intersection of philosophy and technology.

## **What is a Philosothon?**

While traditional hackathons gather programmers to build software in a limited timeframe, the Philosothon adapts this model for philosophical exploration. Small teams of students will work together to develop robust philosophical perspectives on contemporary technological issuesโcombining research, critical thinking, and argumentative rigor in a collaborative environment.

## **Why This Matters**

Philosophy has traditionally been practiced as a solitary pursuitโreading, writing, and thinking in isolation. The Philosothon challenges this norm by creating a space where philosophical ideas can emerge through dialogue and collaboration, mirroring how many other disciplines approach complex problems.

"Philosophy students rarely get structured opportunities for extended collaborative thinking," notes the event organizer. "We're testing whether the hackathon format can bring new energy to philosophical inquiry while building intellectual community."

## **The Format**

Teams will tackle a philosophical theme related to technologyโpossibilities include consciousness and artificial intelligence, digital ethics, or algorithmic governance. After a day of collaborative work, each team will present their philosophical arguments to the group.

The event includes:

* A philosophy of technology workshop with lunch
* A hands-on workshop with Pascal Quest, exploring philosophical questions through technological interaction (with one representative per team)
* Team-based philosophical investigation
* Presentations of developed perspectives

## **Event Details**

**Dates:** April 7-8, 2025  
**Location:** Bahen Atrium, University of Toronto  
**Participants:** 15-30 University of Toronto philosophy students  
**Format:** A collaborative philosophical exploration culminating in team presentations

## **The Bigger Picture**

This trial event represents an educational experiment in how philosophical thinking might be practiced differently. While currently limited to philosophy students, the organizers envision potential future iterations that could bridge philosophy with other disciplines, encouraging technologists, scientists, and artists to incorporate philosophical reflection into their work.

The Philosothon joins a growing movement to reimagine how the humanities are taught and practiced in the 21st century, responding to calls for more collaborative, interdisciplinary, and engaged approaches to traditional fields.

## **For More Information**

This is a closed event for University of Toronto philosophy students, but those interested in learning more about the concept or results can contact:

Logan Rooks
PCU Technology and Society Liaison  
Philosophy of Technology Group  
logan.rooks@mail.utoronto.ca

*Note: This trial event is organized by the Philosophy of Technology Group as an educational experiment and is not an official University of Toronto departmental event.*

================================================================================
FILE: markdown/letter_to_department.md
TYPE: documentation
SIZE: 4899 bytes
LAST MODIFIED: 2025-03-30T17:56:56.968072
================================================================================

# **Philosophy Hackathon ("Philosothon") Trial Event Proposal**

Dear Department of Philosophy,

As the Tech and Society Liaison, I am writing to request your support for a trial "Philosothon" event, designed to test a new format for collaborative philosophical inquiry among University of Toronto students.

## **Executive Summary**

The Philosothon trial will bring together 15-30 philosophy students for an intensive day of collaborative philosophical inquiry focused on technology-related themes, culminating in team presentations. This smaller trial event aims to assess student interest, refine the format, and gather feedback for a potential larger event next academic year. With your modest support of $50 for refreshments, we can launch this experimental initiative that may address the unique challenges philosophy students face in building community.

## **Event Overview**

The Philosothon adapts the hackathon format to philosophical inquiry. Participants will engage in concentrated collaborative thinking to produce well-reasoned arguments on themes at the intersection of philosophy and technology. These might include "Minds and Machines: Consciousness Beyond the Human," "Digital Commons: Rethinking Property in Information Space," or "Algorithmic Governance," among others. The theme will be determined by participant vote and announced at the opening of the event. Teams will produce a 10-minute presentation and accompanying written component.

## **Detailed Schedule**

**Monday, April 7, 2025:**

* 8:30AM-9:00AM: Sign-in and welcome
* 9:00AM-9:30AM: Opening remarks and theme announcement
* 9:30AM-11:30AM: Initial team meetings
* 12:00PM-1:00PM: Philosophy of technology workshop (with lunch provided)
* 6:00PM-8:00PM: Pascal Quest workshop (limited to one representative per team)
* 11:59PM: Submission deadline for presentations and written components

**Tuesday, April 8, 2025:**

* 10:30AM-12:30PM: Team presentations
* 12:30PM-1:30PM: Feedback collection and discussion
* 1:30PM-2:00PM: Closing remarks

## **Organizational Structure**

This trial event will be conducted through the Philosophy of Technology Group (PoTG) rather than the PCU, due to timing constraints and its experimental nature. If successful, we envision transitioning this to a full PCU-sponsored event earlier in the next academic year.

## **Team Formation and Inclusivity**

Teams will be formed through:

* Limited self-selected groups registering together
* Individual registrations matched based on interests and academic year
* Intentional pairing of upper and lower-year students to facilitate mentorship
* Consideration of students' philosophical interests and experience levels

Teams will be announced to participants by the Thursday before the event.

## **Educational Benefits**

This trial event offers several unique educational opportunities:

1. **Collaborative Philosophy**: Creates a structured environment for collaborative philosophical dialogueโa rare opportunity compared to the isolated nature of traditional philosophy coursework.
2. **Applied Philosophical Thinking**: Workshops on technological topics provide opportunities to apply philosophical concepts to concrete examples.
3. **Interdisciplinary Exploration**: Bridges philosophical inquiry with technological questions.
4. **Cross-Level Mentorship**: Teams will include students from various academic years, fostering peer mentorship.
5. **Low-Stakes Creative Expression**: Provides students with an opportunity to develop and present original philosophical arguments in a supportive environment.

## **Assessment and Reporting**

As this is a trial event, assessment is particularly crucial. We will:

* Administer detailed participant feedback surveys
* Document philosophical outputs and presentation quality
* Track attendance and engagement metrics
* Identify specific challenges and opportunities for improvement

We commit to providing the department with a comprehensive post-event report detailing outcomes, learnings, and recommendations for future iterations.

## **Funding Request**

We respectfully request financial support of $50 to cover lunch for participants during the Pascal Quest workshop. This modest investment will help us test the viability of this innovative educational format.

## **Conclusion**

The Philosothon trial represents a small but meaningful step toward fostering collaborative philosophical inquiry while addressing the specific community-building challenges faced by philosophy students. With your support, we can experiment with a new format that has potential to strengthen both student engagement and interdisciplinary philosophical education at the University of Toronto.

Thank you for your consideration. I would welcome the opportunity to discuss this proposal further.

Sincerely,

Logan Rooks 
PCU Tech and Society Liaison
Philosophy of Technology Group President

================================================================================
FILE: markdown/proposal_to_students.md
TYPE: documentation
SIZE: 4497 bytes
LAST MODIFIED: 2025-03-30T17:56:56.968072
================================================================================

# **Philosothon: A Philosophy Hackathon โ Call for Participants**

Hey Philosophy Students!

Ever wanted more chances to dive into extended philosophical discussions with your peers? Tired of philosophy being just you, alone with your books and papers? The **Philosophy of Technology Group** invites you to join our experimental **Philosothon** โ a one-day intensive philosophical collaboration event happening **April 7-8, 2025**.

## **What is a Philosothon?**

Think of it as a philosophy hackathon โ but instead of coding, we're creating philosophical arguments. You'll team up with fellow students to tackle a compelling philosophical theme related to technology. You'll develop ideas together, create a written piece, and present your thinking to a panel of graduate student judges. It's philosophy as a team sport!

## **Why Participate?**

* **Break out of solitary philosophical work** โ Philosophy courses rarely give us the chance to think collaboratively. Here's your opportunity!
* **Engage with ideas at the intersection of philosophy and technology** โ Explore themes like consciousness and AI, digital commons, algorithmic governance, or technological mediation
* **Experience philosophy as a creative, generative practice** โ Not just analyzing others' ideas, but building something together
* **Connect with other philosophy students** you might not meet in your courses
* **Get feedback on your ideas** in a low-stakes, supportive environment from graduate students
* **Participate in unique workshops** including a hands-on session with Pascal Quest technology

## **Event Details**

**Monday, April 7:**
* 8:30AM: Sign-in and welcome
* 9:00AM: Opening remarks and theme announcement
* 12:00-1:00PM: Philosophy of Technology workshop and lunch
* 6:00-8:00PM: Pascal Quest workshop (limited to one representative per team)
* 11:59PM: Submission deadline

**Tuesday, April 8:**
* 10:30AM-12:30PM: Team presentations
* 12:30-2:00PM: Discussion, feedback, and closing

**Location:** Bahen Atrium

## **How Teams Work**

We believe philosophy is enriched through diverse perspectives. Our matchmaking process is designed with this in mind. When you sign up, you'll tell us whether you'd prefer teammates with similar philosophical interests or different ones. Maybe you want to dive deep with someone who shares your passion for phenomenology, or perhaps you'd benefit more from the creative friction of working with someone from a different philosophical tradition.

Upper-year students can opt to mentor newer philosophy students (and we hope you will!), while first or second years can request to be paired with more experienced students. This creates learning opportunities flowing in both directions โ fresh perspectives meet developed knowledge.

Teams will be announced by Thursday, April 3rd, giving you time to connect before the event.

## **Philosophical Themes**

The exact theme will be selected through participant voting and revealed at the opening, but might include:

* Minds and Machines: Consciousness Beyond the Human
* Digital Commons: Rethinking Property in Information Space
* Algorithmic Governance: Authority Without Autonomy?
* Technological Singularity: Philosophical Implications of Superintelligence
* Extended Perception: Technology and Phenomenological Experience
* Digital Ethics: Beyond Utilitarian Frameworks
* Attention Economies: The Commodification of Consciousness
* Algorithmic Aesthetics: Beauty in the Age of Machine Creation

You'll also help us choose a workshop for Saturday evening, with options like:

* Language Models as Philosophical Objects
* Generative AI Art: Creativity, Authorship, and Aesthetics
* Reinforcement Learning: The Technical Foundations of AI "Creativity"
* Technology as Tool vs Master: Beyond Instrumentalism
* Digital Commons and Information Capitalism
* The Attention Economy: Technical Mechanisms and Philosophical Implications

## **How to Apply**

This is a small trial event limited to 15-30 participants. Simply fill out the sign-up form by Thursday, April 3rd at noon. We'll ask about your interests, experience level, and preferences for teammates and topics. If more people apply than we can accommodate, we'll aim for a diverse mix of participants.

[Google Form Link]

## **Questions?**

Reach out to logan.rooks@mail.utoronto.ca with any questions.


**Join us in reimagining how philosophy can be practiced!**

Logan Rooks  
PCU Tech and Society Liaison  
Philosophy of Technology Group

================================================================================
SUMMARY
Files processed: 24
Files ignored by .context-ignore: 61
Files skipped for other reasons: 0
Total size: 229065 bytes
================================================================================
