// Generated by generate-registration.ts. Do not edit manually.


// Define abstract types matching the central schema
export type QuestionType =
  | 'text'
  | 'textarea'
  | 'email'
  | 'password'
  | 'number'
  | 'boolean'
  | 'single-select'
  | 'multi-select';

export interface Question {
  id: string;
  label: string;
  type: QuestionType;
  required: boolean;
  placeholder?: string;
  options?: string[];
  dependsOn?: string;
  dependsValue?: any;
  clientValidation?: (value: any, allValues?: Record<string, any>) => string | undefined;
}



export type FormDataStore = {
  email?: any; // TODO: Refine types based on q.type
  full_name?: any; // TODO: Refine types based on q.type
  pronouns?: any; // TODO: Refine types based on q.type
  student_id?: any; // TODO: Refine types based on q.type
  university?: any; // TODO: Refine types based on q.type
  academic_year?: any; // TODO: Refine types based on q.type
  program?: any; // TODO: Refine types based on q.type
  philosophy_coursework?: any; // TODO: Refine types based on q.type
  philosophy_interests?: any; // TODO: Refine types based on q.type
  event_expectations?: any; // TODO: Refine types based on q.type
  attendance_preference?: any; // TODO: Refine types based on q.type
  workshop_preference?: any; // TODO: Refine types based on q.type
  dietary_restrictions?: any; // TODO: Refine types based on q.type
  accessibility_needs?: any; // TODO: Refine types based on q.type
  code_of_conduct_agreement?: any; // TODO: Refine types based on q.type
  photo_consent?: any; // TODO: Refine types based on q.type
  data_privacy_consent?: any; // TODO: Refine types based on q.type
  currentQuestionIndex?: number;
  isVerified?: boolean; // Track if email/password step is done
};


export const questions: Question[] = [
  {
    id: 'email',
    label: `Email Address`, // Use template literal for easier escaping
    type: 'email',
    required: true,
    placeholder: `your.email@example.com`,
  },
  {
    id: 'full_name',
    label: `Full Name`, // Use template literal for easier escaping
    type: 'text',
    required: true,
    placeholder: `First Last`,
  },
  {
    id: 'pronouns',
    label: `Pronouns`, // Use template literal for easier escaping
    type: 'text',
    required: false,
    placeholder: `e.g., she/her, they/them, he/him`,
  },
  {
    id: 'student_id',
    label: `Student ID Number`, // Use template literal for easier escaping
    type: 'text',
    required: true,
    placeholder: `e.g., 1001234567`,
  },
  {
    id: 'university',
    label: `University/Institution`, // Use template literal for easier escaping
    type: 'text',
    required: true,
    placeholder: `e.g., University of Toronto`,
  },
  {
    id: 'academic_year',
    label: `Current Academic Year`, // Use template literal for easier escaping
    type: 'single-select',
    required: true,
    options: ["1st Year","2nd Year","3rd Year","4th Year","Graduate Student","Other"],
  },
  {
    id: 'program',
    label: `Program of Study`, // Use template literal for easier escaping
    type: 'text',
    required: true,
    placeholder: `e.g., Philosophy Specialist, Computer Science Major`,
  },
  {
    id: 'philosophy_coursework',
    label: `Relevant Philosophy Coursework (Optional)`, // Use template literal for easier escaping
    type: 'textarea',
    required: false,
    placeholder: `List any philosophy courses you have taken or are currently taking.`,
  },
  {
    id: 'philosophy_interests',
    label: `Areas of Philosophical Interest (Optional)`, // Use template literal for easier escaping
    type: 'textarea',
    required: false,
    placeholder: `Briefly describe your main interests in philosophy (e.g., ethics, metaphysics, AI, specific philosophers).`,
  },
  {
    id: 'event_expectations',
    label: `What do you hope to gain from participating in the Philosothon?`, // Use template literal for easier escaping
    type: 'textarea',
    required: true,
    placeholder: `e.g., Discuss ideas, meet peers, learn about specific topics...`,
  },
  {
    id: 'attendance_preference',
    label: `Attendance Preference`, // Use template literal for easier escaping
    type: 'single-select',
    required: true,
    options: ["In-Person","Online","Hybrid (Mix of Both)"],
  },
  {
    id: 'workshop_preference',
    label: `Workshop Preference (Rank Top 3 if applicable)`, // Use template literal for easier escaping
    type: 'textarea',
    required: false,
    placeholder: `List your preferred workshops in order, if any.`,
  },
  {
    id: 'dietary_restrictions',
    label: `Dietary Restrictions or Allergies (if attending in-person)`, // Use template literal for easier escaping
    type: 'textarea',
    required: false,
    placeholder: `e.g., Vegetarian, Gluten-Free, Peanut Allergy`,
    dependsOn: 'attendance_preference',
    dependsValue: "In-Person",
  },
  {
    id: 'accessibility_needs',
    label: `Accessibility Needs (Optional)`, // Use template literal for easier escaping
    type: 'textarea',
    required: false,
    placeholder: `Please let us know if you have any accessibility requirements.`,
  },
  {
    id: 'code_of_conduct_agreement',
    label: `I agree to abide by the event\'s Code of Conduct.`, // Use template literal for easier escaping
    type: 'boolean',
    required: true,
  },
  {
    id: 'photo_consent',
    label: `I consent to potentially being photographed or recorded during the event for promotional purposes.`, // Use template literal for easier escaping
    type: 'boolean',
    required: true,
  },
  {
    id: 'data_privacy_consent',
    label: `I consent to the storage and processing of my registration data as described in the Privacy Policy.`, // Use template literal for easier escaping
    type: 'boolean',
    required: true,
  }
];
